import daisy.lang._
import Real._
import daisy.lang.Vector._

object harmonic {

	def harmonic(x: Vector, y: Vector): Vector = {
require(x >= -5.32 && x <= 725.6 && x.size(100)
	 && x.specV(Set(((0, 3),(215.14, 606.67)), ((6, 8),(26.47, 661.86)), ((10, 12),(224.57, 438.82)),
((13, 23),(57.75, 459.81)), ((24, 24),(497.71, 515.32)), ((26, 36),(462.71, 646.03)),
((38, 38),(448.62, 620.78)), ((42, 48),(138.02, 444.0)), ((51, 61),(340.37, 407.96)),
((72, 82),(25.17, 680.68))))
	 && y >= -432.12 && y <= 78.94 && y.size(100)
	 && y.specV(Set(((0, 0),(-181.96, -115.83)), ((1, 5),(-311.89, -41.89)), ((6, 6),(-197.91, -33.51)),
((7, 8),(-340.35, -190.28)), ((9, 15),(-377.4, -366.47)), ((16, 16),(-385.25, -212.06)),
((42, 44),(-206.25, -171.4)), ((45, 49),(-411.29, -106.86)), ((51, 51),(-390.09, -57.27)),
((52, 62),(-170.72, -34.7))))
	)

        //x1 := x1 + 0.01 * x2
        val x1: Real = y.fold(x.head)((acc: Real, xi: Real) => {acc + 0.01* xi})
        //x2 := -0.01 * x1 + 0.99 * x2
        val x2: Real = x.fold(y.head)((acc: Real, xi: Real) => {-0.01 * xi + 0.99 * acc})
        Vector(List(x1, x2))
    }


}