import daisy.lang._
import Real._
import daisy.lang.Vector._

object nonlin1 {

	def nonlin1(x: Vector, y: Vector): Vector = {
require(x >= 0.0 && x <= 1.0 && x.size(100)
	 && x.specV(Set(((8, 14),(0.21, 0.26)), ((25, 35),(0.32, 0.51)), ((37, 37),(0.04, 0.18)),
((38, 43),(0.16, 0.94)), ((46, 48),(0.68, 0.9)), ((55, 63),(0.17, 0.78)),
((64, 74),(0.12, 0.53)), ((79, 89),(0.36, 0.64)), ((91, 91),(0.56, 0.87)),
((92, 97),(0.58, 0.88))))
	 && y >= 0.0 && y <= 1.0 && y.size(100)
	 && y.specV(Set(((32, 42),(0.15, 0.62)), ((47, 54),(0.43, 0.51)), ((59, 67),(0.13, 0.9)),
((70, 80),(0.23, 0.65)), ((85, 85),(0.0, 0.02)), ((86, 88),(0.11, 0.35)),
((89, 89),(0.22, 0.36)), ((90, 94),(0.58, 0.59)), ((95, 95),(0.2, 0.62)),
((96, 99),(0.13, 0.47))))
	)

        //x := x + 0.01 * (-2*x - 3*y + x*x)
        val x1: Real = y.fold(x.head)((acc: Real, yi: Real) => {acc + 0.01 * (-2*acc - 3*yi + acc*acc)})
        //y := y + 0.01 * (x + y)
        val y1: Real = x.fold(y.head)((acc: Real, xi: Real) => {acc + 0.01 * (xi + acc)})
        Vector(List(x1, y1))
    }


}