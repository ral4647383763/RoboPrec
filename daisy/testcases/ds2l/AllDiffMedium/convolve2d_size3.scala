import daisy.lang._
import Real._
import daisy.lang.Vector._

object convolve2d_size3 {

	def convolve2d_size3(image: Matrix, kernel: Matrix): Matrix = {
require(image >= -153.55 && image <= 291.35 && image.size(9,9)
	 && image.specM(Set((Set((0, 0)),(52.07, 262.46)), (Set((0, 1)),(-80.72, 128.34)),
		(Set((0, 2)),(-35.59, 236.62)), (Set((0, 3)),(-53.01, 233.02)),
		(Set((0, 4)),(51.6, 174.12)), (Set((0, 5)),(66.44, 128.72)),
		(Set((0, 6)),(-59.41, -9.55)), (Set((0, 7)),(-80.23, 76.36)),
		(Set((0, 8)),(-148.75, 232.79)), (Set((1, 0)),(-62.71, 226.62)),
		(Set((1, 1)),(-78.61, 69.44)), (Set((1, 2)),(44.3, 66.5)),
		(Set((1, 3)),(-133.48, -73.12)), (Set((1, 4)),(116.93, 262.12)),
		(Set((1, 5)),(4.18, 185.45)), (Set((1, 6)),(22.96, 102.67)),
		(Set((1, 7)),(112.02, 128.08)), (Set((1, 8)),(217.12, 251.22)),
		(Set((2, 0)),(-32.25, 240.85)), (Set((2, 1)),(45.91, 96.82)),
		(Set((2, 2)),(126.12, 199.89)), (Set((2, 3)),(-135.77, -80.24)),
		(Set((2, 4)),(16.79, 288.48)), (Set((2, 5)),(-11.72, 32.08)),
		(Set((2, 6)),(14.59, 111.77)), (Set((2, 7)),(-65.07, -60.68)),
		(Set((2, 8)),(217.31, 250.01)), (Set((3, 0)),(-126.72, -16.87)),
		(Set((3, 1)),(35.82, 104.42)), (Set((3, 2)),(-138.4, 246.52)),
		(Set((3, 3)),(10.84, 226.82)), (Set((3, 4)),(19.65, 73.81)),
		(Set((3, 5)),(-135.49, 37.6)), (Set((3, 6)),(-16.58, 137.7)),
		(Set((3, 7)),(-136.35, 46.79)), (Set((3, 8)),(-11.12, 122.31)),
		(Set((4, 0)),(111.7, 171.94)), (Set((4, 1)),(-107.83, 171.38)),
		(Set((4, 2)),(67.56, 168.47)), (Set((4, 3)),(91.18, 148.08)),
		(Set((4, 4)),(181.8, 209.18)), (Set((4, 5)),(-104.45, 104.24)),
		(Set((4, 6)),(239.4, 287.79)), (Set((4, 7)),(129.14, 288.95)),
		(Set((4, 8)),(-114.11, -56.2)), (Set((5, 0)),(92.85, 107.41)),
		(Set((5, 1)),(59.59, 101.9)), (Set((5, 2)),(-69.82, 3.29)),
		(Set((5, 3)),(-0.95, 19.81)), (Set((5, 4)),(56.22, 155.95)),
		(Set((5, 5)),(3.14, 280.34)), (Set((5, 6)),(213.66, 221.33)),
		(Set((5, 7)),(-81.08, -17.9)), (Set((5, 8)),(49.53, 175.02)),
		(Set((6, 0)),(-86.15, 251.87)), (Set((6, 1)),(-44.99, 180.85)),
		(Set((6, 2)),(-50.2, 108.54)), (Set((6, 3)),(-123.14, -45.59)),
		(Set((6, 4)),(-133.43, -37.62)), (Set((6, 5)),(11.56, 84.88)),
		(Set((6, 6)),(34.49, 278.88)), (Set((6, 7)),(-60.57, 261.77)),
		(Set((6, 8)),(2.76, 171.78)), (Set((7, 0)),(-98.03, -59.51)),
		(Set((7, 1)),(-35.46, 29.06)), (Set((7, 2)),(194.06, 211.52)),
		(Set((7, 3)),(85.81, 125.36)), (Set((7, 4)),(-58.98, 13.2)),
		(Set((7, 5)),(-144.44, -65.55)), (Set((7, 6)),(82.77, 289.92)),
		(Set((7, 7)),(-83.71, 56.78)), (Set((7, 8)),(-114.51, 73.46)),
		(Set((8, 0)),(85.93, 128.15)), (Set((8, 1)),(-127.04, 247.7)),
		(Set((8, 2)),(-137.06, 55.79)), (Set((8, 3)),(67.75, 105.52)),
		(Set((8, 4)),(-33.71, 32.05)), (Set((8, 5)),(-4.47, 180.54)),
		(Set((8, 6)),(-151.57, -28.5)), (Set((8, 7)),(48.82, 257.61)),
		(Set((8, 8)),(-87.78, -69.77))))
	 && kernel >= -104.89 && kernel <= 57.21 && kernel.size(3, 3)
	&& kernel.specM(Set((Set((0, 0)),(-104.03, -95.57)), (Set((0, 1)),(-100.38, 10.71)),
	(Set((0, 2)),(-16.81, 18.44)), (Set((1, 0)),(-68.49, -49.82)),
	(Set((1, 1)),(-16.17, 6.78)), (Set((1, 2)),(-27.21, -7.68)),
	(Set((2, 0)),(-51.07, 40.98)), (Set((2, 1)),(-21.82, -9.8)),
	(Set((2, 2)),(1.81, 53.39))))
	)

        val flippedK: Matrix = (kernel.flipud()).fliplr()
        val padded: Matrix = image.pad(1,1)
        val output: Matrix = padded.slideReduce(3, 1)(m => {
            val tmp: Matrix = flippedK.*(m) // element-wise multiplication of the kernel and the image
            tmp.foldElements(0.0)((acc, x) => acc + x)
        })
        output
    }


}