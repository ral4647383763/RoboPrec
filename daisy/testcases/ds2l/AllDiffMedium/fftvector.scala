import daisy.lang._
import Real._
import daisy.lang.Vector._

object fftvector {

	def fftvector(vr: Vector, vi: Vector): Vector = {
require(vr >= 68.9 && vr <= 160.43 && vr.size(128)
	 && vr.specV(Set(((0, 0),(75.29, 116.12)), ((1, 1),(110.49, 114.23)), ((2, 2),(130.55, 139.25)),
((3, 3),(85.45, 113.79)), ((4, 4),(105.71, 155.86)), ((5, 5),(100.14, 135.49)),
((6, 6),(89.16, 139.35)), ((7, 7),(94.66, 101.41)), ((8, 8),(121.68, 146.65)),
((9, 9),(105.84, 111.54)), ((10, 10),(81.85, 128.78)), ((11, 11),(78.45, 160.25)),
((12, 12),(116.4, 129.37)), ((13, 13),(86.71, 136.44)), ((14, 14),(69.28, 138.16)),
((15, 15),(81.43, 148.42)), ((16, 16),(79.56, 85.75)), ((17, 17),(85.19, 128.25)),
((18, 18),(69.27, 76.62)), ((19, 19),(78.39, 132.16)), ((20, 20),(96.0, 128.51)),
((21, 21),(99.23, 137.43)), ((22, 22),(132.82, 141.6)), ((23, 23),(97.98, 120.78)),
((24, 24),(130.55, 157.21)), ((25, 25),(70.14, 118.88)), ((26, 26),(79.1, 132.33)),
((27, 27),(102.39, 142.83)), ((28, 28),(73.2, 140.85)), ((29, 29),(79.36, 156.41)),
((30, 30),(82.94, 84.78)), ((31, 31),(79.61, 134.53)), ((32, 32),(117.56, 130.49)),
((33, 33),(81.79, 139.37)), ((34, 34),(71.94, 91.97)), ((35, 35),(98.17, 138.07)),
((36, 36),(130.18, 153.52)), ((37, 37),(127.52, 127.99)), ((38, 38),(71.92, 90.37)),
((39, 39),(90.71, 131.94)), ((40, 40),(93.97, 106.18)), ((41, 41),(69.24, 119.31)),
((42, 42),(109.85, 121.74)), ((43, 43),(70.21, 111.1)), ((44, 44),(90.3, 155.74)),
((45, 45),(97.64, 145.06)), ((46, 46),(86.74, 96.17)), ((47, 47),(97.31, 101.4)),
((48, 48),(130.25, 152.38)), ((49, 49),(127.7, 127.91)), ((50, 50),(88.97, 159.76)),
((51, 51),(142.06, 145.14)), ((52, 52),(94.11, 133.48)), ((53, 53),(129.62, 131.11)),
((54, 54),(143.44, 158.41)), ((55, 55),(85.73, 138.7)), ((56, 56),(70.29, 90.3)),
((57, 57),(76.93, 128.94)), ((58, 58),(88.51, 122.66)), ((59, 59),(91.38, 131.85)),
((60, 60),(90.52, 145.31)), ((61, 61),(72.4, 103.84)), ((62, 62),(133.44, 154.79)),
((63, 63),(81.38, 142.28)), ((64, 64),(112.82, 127.04)), ((65, 65),(101.04, 112.98)),
((66, 66),(111.23, 119.81)), ((67, 67),(79.4, 123.49)), ((68, 68),(118.58, 137.76)),
((69, 69),(95.08, 95.9)), ((70, 70),(110.86, 113.86)), ((71, 71),(102.5, 109.25)),
((72, 72),(104.67, 114.36)), ((73, 73),(98.34, 119.99)), ((74, 74),(105.93, 126.35)),
((75, 75),(147.82, 152.29)), ((76, 76),(71.46, 84.32)), ((77, 77),(84.5, 139.95)),
((78, 78),(91.84, 127.69)), ((79, 79),(76.49, 146.14)), ((80, 80),(73.5, 105.34)),
((81, 81),(77.7, 138.39)), ((82, 82),(76.68, 113.63)), ((83, 83),(138.86, 140.06)),
((84, 84),(82.43, 157.72)), ((85, 85),(119.32, 149.98)), ((86, 86),(70.9, 149.22)),
((87, 87),(132.54, 140.72)), ((88, 88),(125.01, 144.08)), ((89, 89),(75.22, 146.58)),
((90, 90),(70.75, 120.76)), ((91, 91),(101.19, 138.32)), ((92, 92),(95.51, 149.98)),
((93, 93),(109.31, 127.51)), ((94, 94),(104.02, 110.13)), ((95, 95),(92.02, 123.29)),
((96, 96),(78.73, 150.41)), ((97, 97),(140.29, 152.77)), ((98, 98),(122.05, 141.81)),
((99, 99),(115.21, 123.35)), ((100, 100),(117.44, 151.26)), ((101, 101),(80.99, 89.62)),
((102, 102),(101.09, 102.35)), ((103, 103),(83.03, 145.5)), ((104, 104),(82.56, 111.35)),
((105, 105),(101.0, 122.33)), ((106, 106),(111.02, 121.14)), ((107, 107),(93.38, 146.19)),
((108, 108),(130.06, 137.9)), ((109, 109),(119.63, 152.66)), ((110, 110),(131.47, 148.05)),
((111, 111),(136.36, 150.48)), ((112, 112),(72.87, 78.99)), ((113, 113),(88.51, 117.19)),
((114, 114),(73.19, 135.78)), ((115, 115),(93.0, 129.04)), ((116, 116),(148.19, 156.73)),
((117, 117),(127.75, 143.7)), ((118, 118),(97.94, 153.85)), ((119, 119),(90.45, 100.94)),
((120, 120),(159.78, 159.98)), ((121, 121),(120.08, 122.1)), ((122, 122),(86.14, 157.93)),
((123, 123),(130.12, 146.28)), ((124, 124),(105.0, 142.98)), ((125, 125),(78.74, 117.68)),
((126, 126),(100.62, 141.14)), ((127, 127),(73.83, 140.47))))
	 && vi >= -133.21 && vi <= 723.11 && vi.size(128)
	 && vi.specV(Set(((0, 0),(222.36, 682.08)), ((1, 1),(150.38, 578.03)), ((2, 2),(24.56, 618.51)),
((3, 3),(40.86, 261.5)), ((4, 4),(169.53, 555.47)), ((5, 5),(126.67, 667.27)),
((6, 6),(-129.53, 669.47)), ((7, 7),(10.8, 694.18)), ((8, 8),(443.86, 531.7)),
((9, 9),(231.14, 285.92)), ((10, 10),(39.44, 58.28)), ((11, 11),(-53.83, -19.82)),
((12, 12),(240.63, 292.27)), ((13, 13),(459.08, 525.53)), ((14, 14),(283.61, 332.43)),
((15, 15),(2.79, 416.96)), ((16, 16),(412.81, 591.54)), ((17, 17),(349.95, 612.44)),
((18, 18),(432.45, 636.35)), ((19, 19),(13.55, 548.12)), ((20, 20),(345.27, 579.64)),
((21, 21),(12.5, 87.11)), ((22, 22),(95.51, 685.32)), ((23, 23),(56.31, 712.61)),
((24, 24),(-101.41, 613.46)), ((25, 25),(359.37, 528.47)), ((26, 26),(-63.68, 150.09)),
((27, 27),(-99.95, -60.25)), ((28, 28),(-58.5, -54.46)), ((29, 29),(-24.22, 675.63)),
((30, 30),(497.77, 638.75)), ((31, 31),(301.72, 393.2)), ((32, 32),(532.4, 706.44)),
((33, 33),(411.57, 474.18)), ((34, 34),(248.0, 268.46)), ((35, 35),(184.41, 710.92)),
((36, 36),(299.3, 555.56)), ((37, 37),(321.1, 607.79)), ((38, 38),(264.84, 411.85)),
((39, 39),(219.16, 719.7)), ((40, 40),(-96.03, 558.23)), ((41, 41),(-36.23, 321.01)),
((42, 42),(-82.82, 609.71)), ((43, 43),(256.37, 289.29)), ((44, 44),(18.72, 554.07)),
((45, 45),(56.77, 230.5)), ((46, 46),(-90.52, -1.27)), ((47, 47),(-9.37, 37.67)),
((48, 48),(99.88, 435.16)), ((49, 49),(365.22, 370.34)), ((50, 50),(371.67, 722.24)),
((51, 51),(11.05, 204.77)), ((52, 52),(35.28, 555.92)), ((53, 53),(234.13, 497.06)),
((54, 54),(-113.66, 96.3)), ((55, 55),(198.92, 551.6)), ((56, 56),(429.37, 479.0)),
((57, 57),(18.45, 620.53)), ((58, 58),(95.97, 591.58)), ((59, 59),(400.84, 596.36)),
((60, 60),(21.5, 143.72)), ((61, 61),(585.8, 691.14)), ((62, 62),(269.77, 487.71)),
((63, 63),(551.75, 608.35)), ((64, 64),(-15.72, 587.31)), ((65, 65),(-126.46, 229.01)),
((66, 66),(349.18, 482.66)), ((67, 67),(45.19, 309.14)), ((68, 68),(-78.49, 236.12)),
((69, 69),(-65.67, 99.76)), ((70, 70),(194.44, 591.85)), ((71, 71),(386.38, 485.04)),
((72, 72),(37.16, 536.18)), ((73, 73),(322.14, 392.67)), ((74, 74),(268.36, 345.99)),
((75, 75),(327.77, 336.86)), ((76, 76),(-16.66, 176.75)), ((77, 77),(-32.09, 465.68)),
((78, 78),(210.69, 645.88)), ((79, 79),(191.88, 534.51)), ((80, 80),(304.52, 532.79)),
((81, 81),(552.33, 584.22)), ((82, 82),(-1.07, 83.5)), ((83, 83),(-16.55, 668.81)),
((84, 84),(-54.3, 693.38)), ((85, 85),(-58.54, 647.48)), ((86, 86),(318.16, 334.49)),
((87, 87),(537.8, 681.09)), ((88, 88),(244.18, 308.68)), ((89, 89),(216.64, 706.94)),
((90, 90),(350.21, 524.02)), ((91, 91),(457.31, 683.84)), ((92, 92),(-89.11, 638.09)),
((93, 93),(-53.5, 618.51)), ((94, 94),(144.02, 223.41)), ((95, 95),(-30.13, 620.15)),
((96, 96),(80.63, 132.95)), ((97, 97),(598.37, 642.2)), ((98, 98),(331.55, 423.68)),
((99, 99),(486.83, 560.59)), ((100, 100),(310.54, 658.97)), ((101, 101),(-51.35, 252.2)),
((102, 102),(44.49, 679.54)), ((103, 103),(277.7, 524.77)), ((104, 104),(-60.59, -48.03)),
((105, 105),(36.71, 501.71)), ((106, 106),(146.48, 366.51)), ((107, 107),(174.16, 331.82)),
((108, 108),(68.78, 674.73)), ((109, 109),(0.98, 718.15)), ((110, 110),(452.49, 620.73)),
((111, 111),(98.62, 702.91)), ((112, 112),(341.05, 572.2)), ((113, 113),(660.96, 695.95)),
((114, 114),(-41.43, 23.27)), ((115, 115),(-129.6, -124.5)), ((116, 116),(235.3, 635.68)),
((117, 117),(-129.59, 715.08)), ((118, 118),(61.79, 338.51)), ((119, 119),(455.14, 653.73)),
((120, 120),(55.75, 619.38)), ((121, 121),(147.88, 567.53)), ((122, 122),(140.88, 600.31)),
((123, 123),(-93.11, 344.65)), ((124, 124),(348.22, 414.9)), ((125, 125),(-119.82, 411.88)),
((126, 126),(-113.4, 154.48)), ((127, 127),(275.98, 648.39))))
	)

        /* v: (real part of signal / Fourier coeff., imaginary part of signal / Fourier coeff. ) */
        if (vr.length() == 1)
            Vector(List(vr.head, vi.head))
        else {
            val scalar: Real = 1
            val Pi: Real = 3.1415926
            val n: Int = vr.length()
            val direction: Vector = Vector(List(0.0, -2.0))
            val evens: Vector = fftvector(vr.everyNth(2, 0), vi.everyNth(2, 0))
            val odds: Vector = fftvector(vr.everyNth(2, 1), vi.everyNth(2, 1))

            val resleft: Vector = evens.enumSlideFlatMap(2)((k, xv) => {
                val base: Vector = xv / scalar

                val oddV: Vector = odds.slice(2 * k, 2 * k + 1)
                val expV: Vector = (direction.*(Pi * k / n)).exp()
                val offset: Vector = (oddV x expV) / scalar
                base + offset
            })

            val resright: Vector = evens.enumSlideFlatMap(2)((k, xv) => {
                val base: Vector = xv / scalar

                val oddV: Vector = odds.slice(2 * k, 2 * k + 1)
                val expV: Vector = (direction.*(Pi * k / n)).exp()
                val offset: Vector = (oddV x expV) / scalar
                base - offset
            })

            resleft ++ resright
        }
    }


}