import daisy.lang._
import Real._
import daisy.lang.Vector._

object fftvector {

	def fftvector(vr: Vector, vi: Vector): Vector = {
require(vr >= 68.9 && vr <= 160.43 && vr.size(512)
	 && vr.specV(Set(((0, 1),(108.48, 116.69)), ((2, 2),(109.97, 145.55)), ((3, 3),(101.07, 141.52)),
((4, 8),(92.11, 102.3)), ((9, 10),(88.08, 117.97)), ((11, 21),(108.3, 125.92)),
((22, 22),(94.85, 105.28)), ((23, 33),(131.56, 148.67)), ((34, 35),(124.61, 139.97)),
((36, 38),(116.17, 129.23)), ((39, 39),(114.03, 117.94)), ((40, 41),(106.21, 152.55)),
((42, 48),(140.07, 154.29)), ((49, 56),(76.54, 152.22)), ((57, 57),(98.8, 156.19)),
((58, 58),(101.78, 154.82)), ((59, 69),(143.93, 153.12)), ((70, 71),(116.21, 145.72)),
((72, 72),(89.6, 136.33)), ((73, 73),(99.76, 150.2)), ((74, 75),(90.85, 107.52)),
((76, 76),(102.91, 128.05)), ((77, 77),(125.2, 152.4)), ((78, 88),(129.71, 156.58)),
((89, 95),(74.05, 134.36)), ((100, 110),(74.59, 136.94)), ((184, 185),(96.43, 100.45)),
((221, 231),(88.72, 115.36)), ((261, 266),(126.18, 160.38)), ((267, 269),(107.2, 127.08)),
((270, 273),(105.17, 120.22)), ((274, 276),(108.61, 146.76)), ((277, 287),(119.69, 122.74)),
((289, 291),(82.28, 88.99)), ((293, 303),(113.04, 114.15)), ((304, 308),(108.26, 129.01)),
((309, 310),(124.93, 135.71)), ((314, 324),(88.12, 141.21)), ((325, 326),(71.85, 103.75)),
((327, 337),(97.29, 139.42)), ((345, 345),(120.6, 145.33)), ((346, 347),(91.3, 128.35)),
((349, 355),(69.89, 126.34)), ((381, 385),(77.21, 139.05)), ((386, 388),(111.51, 133.26)),
((391, 394),(70.56, 73.1)), ((397, 399),(136.45, 147.94)), ((401, 401),(130.88, 146.35)),
((402, 412),(108.88, 120.53)), ((418, 428),(92.15, 103.73)), ((447, 457),(113.68, 150.23))))
	 && vi >= -133.21 && vi <= 723.11 && vi.size(512)
	 && vi.specV(Set(((0, 10),(448.94, 540.74)), ((11, 13),(-82.76, 426.63)), ((14, 24),(116.07, 397.85)),
((25, 26),(25.87, 353.24)), ((27, 27),(660.32, 669.29)), ((28, 28),(-97.09, 290.74)),
((29, 29),(8.57, 498.82)), ((30, 30),(362.82, 427.92)), ((31, 32),(239.9, 584.43)),
((33, 43),(31.48, 125.97)), ((46, 46),(30.12, 281.13)), ((47, 49),(154.21, 498.34)),
((50, 50),(154.87, 693.6)), ((51, 51),(164.42, 423.69)), ((53, 54),(561.74, 595.07)),
((55, 57),(495.8, 662.53)), ((58, 59),(-95.84, 28.32)), ((60, 61),(-10.54, 580.32)),
((62, 67),(-131.2, 391.35)), ((68, 68),(10.17, 719.22)), ((71, 72),(-14.58, 198.87)),
((73, 83),(-107.07, 684.2)), ((84, 84),(134.64, 588.63)), ((85, 95),(-58.77, 544.02)),
((103, 105),(574.39, 719.07)), ((106, 116),(-45.33, 400.35)), ((117, 126),(-122.57, -121.31)),
((135, 140),(191.23, 193.04)), ((141, 151),(-15.23, 660.5)), ((152, 152),(257.78, 500.2)),
((153, 163),(280.49, 650.98)), ((180, 190),(-87.26, 240.89)), ((214, 215),(163.68, 328.74)),
((277, 287),(166.96, 416.96)), ((294, 304),(176.85, 674.82)), ((313, 323),(28.06, 202.32)),
((326, 327),(-20.54, 541.24)), ((328, 329),(31.8, 390.76)), ((335, 335),(34.24, 713.05)),
((336, 336),(76.55, 677.38)), ((338, 348),(124.63, 330.73)), ((349, 351),(95.37, 497.36)),
((352, 360),(411.43, 607.67)), ((361, 361),(241.61, 497.74)), ((362, 364),(167.57, 531.12)),
((365, 375),(371.78, 470.72)), ((376, 377),(497.37, 617.0)), ((378, 378),(59.24, 439.49)),
((381, 382),(16.4, 441.76)), ((383, 391),(-115.36, 81.27)), ((393, 403),(163.98, 552.34))))
	)

        /* v: (real part of signal / Fourier coeff., imaginary part of signal / Fourier coeff. ) */
        if (vr.length() == 1)
            Vector(List(vr.head, vi.head))
        else {
            val scalar: Real = 1
            val Pi: Real = 3.1415926
            val n: Int = vr.length()
            val direction: Vector = Vector(List(0.0, -2.0))
            val evens: Vector = fftvector(vr.everyNth(2, 0), vi.everyNth(2, 0))
            val odds: Vector = fftvector(vr.everyNth(2, 1), vi.everyNth(2, 1))

            val resleft: Vector = evens.enumSlideFlatMap(2)((k, xv) => {
                val base: Vector = xv / scalar

                val oddV: Vector = odds.slice(2 * k, 2 * k + 1)
                val expV: Vector = (direction.*(Pi * k / n)).exp()
                val offset: Vector = (oddV x expV) / scalar
                base + offset
            })

            val resright: Vector = evens.enumSlideFlatMap(2)((k, xv) => {
                val base: Vector = xv / scalar

                val oddV: Vector = odds.slice(2 * k, 2 * k + 1)
                val expV: Vector = (direction.*(Pi * k / n)).exp()
                val offset: Vector = (oddV x expV) / scalar
                base - offset
            })

            resleft ++ resright
        }
    }


}