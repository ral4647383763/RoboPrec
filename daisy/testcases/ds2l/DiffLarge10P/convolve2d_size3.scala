import daisy.lang._
import Real._
import daisy.lang.Vector._

object convolve2d_size3 {

	def convolve2d_size3(image: Matrix, kernel: Matrix): Matrix = {
require(image >= -153.55 && image <= 291.35 && image.size(81,81)
	 && image.specM(Set((Set((79, 24), (61, 52), (15, 30), (53, 69), (54, 13), (33, 45), (78, 77), (28, 3), (29, 32), (54, 40), (6, 48), (12, 43), (37, 42), (52, 24), (13, 8), (13, 17), (23, 61), (67, 61), (69, 58), (53, 7)),(-6.5, 223.22)), (Set((59, 2), (34, 12), (11, 44), (63, 27), (46, 41), (47, 73), (30, 57), (74, 2)),(-17.21, 174.38)),
		(Set((37, 17), (5, 67), (27, 70), (80, 24), (41, 72), (12, 36), (49, 0)),(185.21, 210.13)), (Set((57, 68), (43, 14), (77, 55), (25, 18), (79, 28), (56, 60), (73, 76), (62, 76)),(-104.01, 133.74)),
		(Set((63, 29), (49, 39), (5, 78), (11, 9), (40, 45), (0, 73), (46, 70), (43, 25), (24, 21), (80, 53), (73, 69), (24, 30), (79, 30), (31, 8), (0, 39), (17, 0), (74, 52)),(-143.69, -26.69)), (Set((47, 13), (28, 64), (29, 29), (60, 62), (17, 9), (65, 58), (74, 61), (1, 46), (32, 64), (50, 24), (44, 17), (16, 65), (52, 30), (72, 8), (4, 54), (10, 42), (53, 77), (32, 48), (78, 33), (58, 30), (27, 24), (26, 4), (19, 29), (72, 10)),(115.03, 269.47)),
		(Set((62, 9), (63, 8), (53, 70), (48, 37), (3, 14), (29, 33), (63, 35), (59, 13), (4, 77), (53, 36), (23, 44), (1, 7), (70, 31), (1, 16), (50, 37), (22, 48), (73, 20), (49, 29), (20, 23), (21, 22), (23, 19)),(-15.66, 107.11)), (Set((68, 51), (4, 79), (78, 28), (0, 11), (29, 1), (34, 61)),(-128.79, 72.66))))
	 && kernel >= -104.89 && kernel <= 57.21 && kernel.size(3, 3)
	&& kernel.specM(Set((Set((0, 0)),(-104.03, -95.57))))
)

        val flippedK: Matrix = (kernel.flipud()).fliplr()
        val padded: Matrix = image.pad(1,1)
        val output: Matrix = padded.slideReduce(3, 1)(m => {
            val tmp: Matrix = flippedK.*(m) // element-wise multiplication of the kernel and the image
            tmp.foldElements(0.0)((acc, x) => acc + x)
        })
        output
    }


}