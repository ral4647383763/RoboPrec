import daisy.lang._
import Real._
import daisy.lang.Vector._

object heat1d {

	def heat1d(ax: Vector): Real = {
require(ax >= 1.0 && ax <= 2.0 && ax.size(35)
	 && ax.specV(Set(((0, 0),(1.5, 1.83)), ((1, 1),(1.55, 1.76)), ((2, 2),(1.53, 1.8)),
((3, 3),(1.16, 1.19)), ((4, 4),(1.14, 1.15)), ((5, 5),(1.57, 1.74)),
((6, 6),(1.43, 1.74)), ((7, 7),(1.36, 1.72)), ((8, 8),(1.37, 1.9)),
((9, 9),(1.43, 1.5)), ((10, 10),(1.43, 1.87)), ((11, 11),(1.39, 1.95)),
((12, 12),(1.43, 1.82)), ((13, 13),(1.27, 1.87)), ((14, 14),(1.04, 1.43)),
((15, 15),(1.06, 1.32)), ((16, 16),(1.09, 1.38)), ((17, 17),(1.06, 1.81)),
((18, 18),(1.11, 1.73)), ((19, 19),(1.51, 1.63)), ((20, 20),(1.26, 1.42)),
((21, 21),(1.73, 1.76)), ((22, 22),(1.34, 1.89)), ((23, 23),(1.47, 1.55)),
((24, 24),(1.15, 1.65)), ((25, 25),(1.17, 1.59)), ((26, 26),(1.04, 1.77)),
((27, 27),(1.02, 1.75)), ((28, 28),(1.14, 1.8)), ((29, 29),(1.46, 1.52)),
((30, 30),(1.63, 1.79)), ((31, 31),(1.15, 1.42)), ((32, 32),(1.0, 1.12))))
	)

        if (ax.length() <= 1) {
            ax.head
        } else {
            val coef = Vector(List(0.25, 0.5, 0.25))
            val updCoefs: Vector = ax.slideReduce(3,1)(v => {
              //val coef = Vector(List(0.25, 0.5, 0.25)) // this takes less stack space
              (coef * v).sum()
            })
            heat1d(updCoefs)
        }
    }


}