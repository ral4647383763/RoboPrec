import daisy.lang._
import Real._
import daisy.lang.Vector._

object lorentz {

	def lorentz(m:Matrix): Vector = {
require(m >= 1.0 && m <= 2.0 && m.size(21,3)
	 && m.specM(Set((Set((0, 0)),(1.07, 1.85)), (Set((0, 1)),(1.01, 1.9)),
		(Set((0, 2)),(1.23, 1.88)), (Set((1, 0)),(1.23, 1.86)),
		(Set((1, 1)),(1.47, 1.82)), (Set((1, 2)),(1.44, 1.82)),
		(Set((2, 0)),(1.14, 1.33)), (Set((2, 1)),(1.35, 1.51)),
		(Set((2, 2)),(1.06, 1.15)), (Set((3, 0)),(1.22, 1.73)),
		(Set((3, 1)),(1.71, 1.74)), (Set((3, 2)),(1.32, 1.82)),
		(Set((4, 0)),(1.64, 1.87)), (Set((4, 1)),(1.2, 1.73)),
		(Set((4, 2)),(1.15, 1.18)), (Set((5, 0)),(1.48, 1.61)),
		(Set((5, 1)),(1.39, 1.49)), (Set((5, 2)),(1.07, 1.72)),
		(Set((6, 0)),(1.6, 1.84)), (Set((6, 1)),(1.27, 1.48)),
		(Set((6, 2)),(1.45, 1.58)), (Set((7, 0)),(1.72, 1.89)),
		(Set((7, 1)),(1.7, 1.71)), (Set((7, 2)),(1.55, 1.63)),
		(Set((8, 0)),(1.34, 1.45)), (Set((8, 1)),(1.64, 1.98)),
		(Set((8, 2)),(1.35, 1.37)), (Set((9, 0)),(1.52, 1.83)),
		(Set((9, 1)),(1.02, 1.31)), (Set((9, 2)),(1.47, 1.84)),
		(Set((10, 0)),(1.04, 1.14)), (Set((10, 1)),(1.29, 1.62)),
		(Set((10, 2)),(1.57, 1.99)), (Set((11, 0)),(1.16, 1.54)),
		(Set((11, 1)),(1.35, 1.85)), (Set((11, 2)),(1.04, 1.78)),
		(Set((12, 0)),(1.24, 1.61)), (Set((12, 1)),(1.17, 1.44)),
		(Set((12, 2)),(1.3, 1.7)), (Set((13, 0)),(1.1, 1.68)),
		(Set((13, 1)),(1.28, 1.79)), (Set((13, 2)),(1.38, 1.6)),
		(Set((14, 0)),(1.09, 1.74)), (Set((14, 1)),(1.03, 1.42)),
		(Set((14, 2)),(1.06, 1.58)), (Set((15, 0)),(1.06, 1.91)),
		(Set((15, 1)),(1.01, 1.21)), (Set((15, 2)),(1.21, 1.67)),
		(Set((16, 0)),(1.26, 1.88)), (Set((16, 1)),(1.13, 1.99)),
		(Set((16, 2)),(1.04, 1.18)), (Set((17, 0)),(1.55, 1.96)),
		(Set((17, 1)),(1.37, 1.44)), (Set((17, 2)),(1.08, 1.74)),
		(Set((18, 0)),(1.35, 1.52)), (Set((18, 1)),(1.49, 1.92)),
		(Set((18, 2)),(1.55, 1.73)), (Set((19, 0)),(1.36, 1.37)),
		(Set((19, 1)),(1.04, 1.53)), (Set((19, 2)),(1.45, 1.79)),
		(Set((20, 0)),(1.01, 1.8)), (Set((20, 1)),(1.15, 1.63)),
		(Set((20, 2)),(1.09, 1.44))))
	)

        val init: Vector = m.row(0)
        m.fold(init)((acc, v) => {
            val x:Real = acc.at(0)
            val y:Real = acc.at(1)
            val z:Real = acc.at(2)
            val tmpx:Real = x + 10.0*(y - x)*0.005
            val tmpy:Real = y + (28.0*x - y - x*z)*0.005
            val tmpz:Real = z + (x*y - 2.666667*z)*0.005
            Vector(List(tmpx,tmpy,tmpz))
        })
    }


}