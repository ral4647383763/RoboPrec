import daisy.lang._
import Real._
import daisy.lang.Vector._

object harmonic {

	def harmonic(x: Vector, y: Vector): Vector = {
require(x >= -5.32 && x <= 725.6 && x.size(100)
	 && x.specV(Set(((0, 0),(563.21, 594.94)), ((1, 1),(206.92, 373.92)), ((2, 2),(424.46, 440.71)),
((3, 3),(522.18, 652.95)), ((4, 4),(474.81, 720.91)), ((5, 5),(684.04, 703.16)),
((6, 6),(434.25, 611.13)), ((7, 7),(40.8, 198.07)), ((8, 8),(194.85, 267.68)),
((9, 9),(553.26, 712.36)), ((10, 10),(148.14, 238.75)), ((11, 11),(99.63, 249.26)),
((12, 12),(159.16, 425.9)), ((13, 13),(207.26, 548.13)), ((14, 14),(111.66, 451.5)),
((15, 15),(256.48, 506.7)), ((16, 16),(428.66, 431.91)), ((17, 17),(429.08, 665.74)),
((18, 18),(75.64, 129.17)), ((19, 19),(178.18, 269.67)), ((20, 20),(285.77, 594.19)),
((21, 21),(238.56, 631.87)), ((22, 22),(604.52, 614.99)), ((23, 23),(513.64, 592.28)),
((24, 24),(497.08, 564.49)), ((25, 25),(336.39, 431.89)), ((26, 26),(329.42, 399.88)),
((27, 27),(82.25, 314.18)), ((28, 28),(50.67, 67.19)), ((29, 29),(105.87, 635.49)),
((30, 30),(333.89, 649.17)), ((31, 31),(167.48, 558.0)), ((32, 32),(284.9, 628.56)),
((33, 33),(236.43, 526.35)), ((34, 34),(264.3, 711.72)), ((35, 35),(139.87, 713.65)),
((36, 36),(631.56, 670.54)), ((37, 37),(29.44, 136.79)), ((38, 38),(310.23, 392.26)),
((39, 39),(518.83, 676.06)), ((40, 40),(611.1, 687.54)), ((41, 41),(676.61, 700.52)),
((42, 42),(7.53, 139.14)), ((43, 43),(159.58, 282.17)), ((44, 44),(230.4, 401.95)),
((45, 45),(60.2, 348.51)), ((46, 46),(177.58, 522.61)), ((47, 47),(203.58, 697.65)),
((48, 48),(96.44, 457.25)), ((49, 49),(71.45, 91.82)), ((50, 50),(382.85, 533.5)),
((51, 51),(222.91, 624.36)), ((52, 52),(346.57, 712.83)), ((53, 53),(67.04, 494.12)),
((54, 54),(121.12, 517.87)), ((55, 55),(454.9, 539.97)), ((56, 56),(60.57, 147.7)),
((57, 57),(-2.24, 376.28)), ((58, 58),(26.17, 39.11)), ((59, 59),(147.39, 199.16)),
((60, 60),(425.6, 507.49)), ((61, 61),(168.15, 191.27)), ((62, 62),(462.26, 702.77)),
((63, 63),(155.34, 260.49)), ((64, 64),(317.72, 422.93)), ((65, 65),(383.04, 522.79)),
((66, 66),(59.5, 95.29)), ((67, 67),(112.39, 539.29)), ((68, 68),(212.95, 591.78)),
((69, 69),(349.96, 705.46)), ((70, 70),(164.8, 616.77)), ((71, 71),(117.89, 405.46)),
((72, 72),(463.35, 670.9)), ((73, 73),(266.75, 519.53)), ((74, 74),(258.59, 607.95)),
((75, 75),(228.96, 632.48)), ((76, 76),(660.09, 687.24)), ((77, 77),(470.38, 584.57)),
((78, 78),(393.66, 703.13)), ((79, 79),(223.85, 430.24)), ((80, 80),(478.87, 697.92)),
((81, 81),(115.27, 513.19)), ((82, 82),(282.4, 360.58)), ((83, 83),(389.88, 514.36)),
((84, 84),(427.6, 533.64)), ((85, 85),(34.99, 515.84)), ((86, 86),(355.85, 585.08)),
((87, 87),(25.37, 151.31)), ((88, 88),(241.91, 309.39)), ((89, 89),(106.81, 655.62)),
((90, 90),(479.15, 609.99)), ((91, 91),(335.34, 418.24)), ((92, 92),(684.01, 717.89)),
((93, 93),(282.74, 319.56)), ((94, 94),(60.34, 561.62)), ((95, 95),(43.38, 411.87)),
((96, 96),(173.3, 567.96)), ((97, 97),(453.77, 608.33)), ((98, 98),(126.76, 330.16)),
((99, 99),(103.64, 640.91))))
	 && y >= -432.12 && y <= 78.94 && y.size(100)
	 && y.specV(Set(((0, 0),(-245.25, -39.43)), ((1, 1),(-290.92, -211.97)), ((2, 2),(-310.28, -42.78)),
((3, 3),(-217.88, -147.59)), ((4, 4),(-412.13, -15.67)), ((5, 5),(-263.99, -130.19)),
((6, 6),(-355.18, -74.51)), ((7, 7),(-163.11, -60.03)), ((8, 8),(-279.89, -110.33)),
((9, 9),(-231.27, -123.08)), ((10, 10),(-293.77, -272.49)), ((11, 11),(-372.67, -139.39)),
((12, 12),(-422.42, -199.83)), ((13, 13),(-357.39, -224.89)), ((14, 14),(-163.93, -33.82)),
((15, 15),(-275.97, -84.52)), ((16, 16),(-272.15, -89.74)), ((17, 17),(-142.77, -73.48)),
((18, 18),(-188.61, 43.71)), ((19, 19),(-272.11, 51.86)), ((20, 20),(-405.32, -292.62)),
((21, 21),(-410.09, -151.43)), ((22, 22),(-174.9, -35.09)), ((23, 23),(-355.86, -31.91)),
((24, 24),(-249.94, -76.08)), ((25, 25),(-340.9, 21.34)), ((26, 26),(-287.53, -41.66)),
((27, 27),(-90.71, 50.1)), ((28, 28),(-343.39, -233.75)), ((29, 29),(-412.58, -17.7)),
((30, 30),(-423.64, -168.33)), ((31, 31),(-21.75, -17.51)), ((32, 32),(-304.31, -209.25)),
((33, 33),(-412.41, -229.88)), ((34, 34),(-361.08, -167.05)), ((35, 35),(-172.95, -124.42)),
((36, 36),(-269.43, -254.77)), ((37, 37),(-94.42, 46.75)), ((38, 38),(-282.22, -251.36)),
((39, 39),(-427.57, -197.55)), ((40, 40),(-129.99, -110.94)), ((41, 41),(-270.39, 34.08)),
((42, 42),(-347.67, -164.03)), ((43, 43),(-395.54, -212.23)), ((44, 44),(-207.37, -197.74)),
((45, 45),(-352.34, -226.14)), ((46, 46),(-218.89, -30.46)), ((47, 47),(-249.44, -81.19)),
((48, 48),(-304.2, -284.18)), ((49, 49),(-364.53, -158.69)), ((50, 50),(-64.39, 63.21)),
((51, 51),(-64.5, -16.63)), ((52, 52),(-258.6, 18.12)), ((53, 53),(-105.86, 44.09)),
((54, 54),(26.07, 68.13)), ((55, 55),(-398.28, -145.99)), ((56, 56),(-121.48, -75.64)),
((57, 57),(-259.82, -220.11)), ((58, 58),(-219.67, -91.49)), ((59, 59),(-401.7, -258.95)),
((60, 60),(-302.64, -209.5)), ((61, 61),(-380.3, -226.79)), ((62, 62),(-196.56, -133.17)),
((63, 63),(-394.2, 77.92)), ((64, 64),(-264.06, 32.96)), ((65, 65),(-407.58, -315.57)),
((66, 66),(-162.85, -108.09)), ((67, 67),(-81.95, 50.42)), ((68, 68),(-425.37, -339.14)),
((69, 69),(-149.92, 77.71)), ((70, 70),(-264.42, -60.99)), ((71, 71),(-235.84, -215.67)),
((72, 72),(-324.2, -22.46)), ((73, 73),(-421.28, -154.77)), ((74, 74),(-191.91, -67.0)),
((75, 75),(-272.85, 28.86)), ((76, 76),(-256.91, -163.43)), ((77, 77),(-247.27, 27.66)),
((78, 78),(-388.29, -370.76)), ((79, 79),(-95.41, -76.39)), ((80, 80),(-358.9, 12.04)),
((81, 81),(-374.0, -231.26)), ((82, 82),(-308.47, -273.13)), ((83, 83),(-248.48, 75.42)),
((84, 84),(-353.69, 43.53)), ((85, 85),(-230.16, 20.71)), ((86, 86),(-196.35, 70.2)),
((87, 87),(-354.97, -186.51)), ((88, 88),(-378.8, -207.41)), ((89, 89),(-341.12, 76.34)),
((90, 90),(-411.92, -133.33)), ((91, 91),(-307.31, -17.79)), ((92, 92),(-393.58, -239.96)),
((93, 93),(-266.78, -174.71)), ((94, 94),(-390.55, -65.72)), ((95, 95),(-404.96, -140.31)),
((96, 96),(-320.55, -289.94)), ((97, 97),(-426.68, 48.11)), ((98, 98),(-308.31, -10.99)),
((99, 99),(-328.97, 59.38))))
	)

        //x1 := x1 + 0.01 * x2
        val x1: Real = y.fold(x.head)((acc: Real, xi: Real) => {acc + 0.01* xi})
        //x2 := -0.01 * x1 + 0.99 * x2
        val x2: Real = x.fold(y.head)((acc: Real, xi: Real) => {-0.01 * xi + 0.99 * acc})
        Vector(List(x1, x2))
    }


}