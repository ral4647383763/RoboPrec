import daisy.lang._
import Real._
import daisy.lang.Vector._

object nonlin1 {

	def nonlin1(x: Vector, y: Vector): Vector = {
require(x >= 0.0 && x <= 1.0 && x.size(100)
	 && x.specV(Set(((0, 0),(0.52, 0.74)), ((1, 1),(0.59, 0.6)), ((2, 2),(0.04, 0.5)),
((3, 3),(0.23, 0.74)), ((4, 4),(0.17, 0.36)), ((5, 5),(0.06, 0.95)),
((6, 6),(0.35, 0.87)), ((7, 7),(0.22, 0.24)), ((8, 8),(0.29, 0.35)),
((9, 9),(0.5, 0.72)), ((10, 10),(0.35, 0.66)), ((11, 11),(0.58, 0.78)),
((12, 12),(0.22, 0.57)), ((13, 13),(0.15, 0.99)), ((14, 14),(0.43, 0.86)),
((15, 15),(0.13, 0.35)), ((16, 16),(0.16, 0.56)), ((17, 17),(0.33, 0.77)),
((18, 18),(0.35, 0.77)), ((19, 19),(0.17, 0.66)), ((20, 20),(0.23, 0.72)),
((21, 21),(0.09, 0.34)), ((22, 22),(0.46, 0.47)), ((23, 23),(0.73, 0.84)),
((24, 24),(0.58, 0.93)), ((25, 25),(0.26, 0.53)), ((26, 26),(0.71, 0.91)),
((27, 27),(0.56, 0.75)), ((28, 28),(0.46, 0.73)), ((29, 29),(0.48, 0.82)),
((30, 30),(0.07, 0.93)), ((31, 31),(0.49, 0.73)), ((32, 32),(0.46, 0.8)),
((33, 33),(0.29, 0.48)), ((34, 34),(0.78, 0.82)), ((35, 35),(0.65, 0.75)),
((36, 36),(0.27, 0.65)), ((37, 37),(0.48, 0.92)), ((38, 38),(0.48, 0.9)),
((39, 39),(0.39, 0.81)), ((40, 40),(0.38, 0.85)), ((41, 41),(0.72, 0.76)),
((42, 42),(0.11, 0.46)), ((43, 43),(0.09, 0.16)), ((44, 44),(0.7, 0.86)),
((45, 45),(0.42, 0.8)), ((46, 46),(0.01, 0.68)), ((47, 47),(0.08, 0.24)),
((48, 48),(0.08, 0.97)), ((49, 49),(0.22, 0.23)), ((50, 50),(0.61, 0.88)),
((51, 51),(0.22, 0.89)), ((52, 52),(0.2, 0.62)), ((53, 53),(0.52, 0.85)),
((54, 54),(0.57, 0.81)), ((55, 55),(0.17, 0.31)), ((56, 56),(0.01, 0.71)),
((57, 57),(0.02, 0.06)), ((58, 58),(0.59, 0.84)), ((59, 59),(0.43, 0.96)),
((60, 60),(0.11, 0.75)), ((61, 61),(0.59, 0.99)), ((62, 62),(0.93, 0.93)),
((63, 63),(0.31, 0.64)), ((64, 64),(0.06, 0.82)), ((65, 65),(0.21, 0.69)),
((66, 66),(0.01, 0.34)), ((67, 67),(0.04, 0.87)), ((68, 68),(0.24, 0.71)),
((69, 69),(0.18, 0.92)), ((70, 70),(0.45, 0.51)), ((71, 71),(0.14, 0.93)),
((72, 72),(0.34, 0.45)), ((73, 73),(0.24, 0.69)), ((74, 74),(0.01, 0.74)),
((75, 75),(0.08, 0.11)), ((76, 76),(0.19, 0.35)), ((77, 77),(0.34, 0.68)),
((78, 78),(0.02, 0.65)), ((79, 79),(0.84, 0.88)), ((80, 80),(0.16, 0.57)),
((81, 81),(0.61, 1.0)), ((82, 82),(0.26, 0.59)), ((83, 83),(0.22, 0.76)),
((84, 84),(0.29, 0.88)), ((85, 85),(0.67, 0.75)), ((86, 86),(0.37, 0.37)),
((87, 87),(0.38, 0.6)), ((88, 88),(0.28, 0.89)), ((89, 89),(0.83, 0.94)),
((90, 90),(0.59, 0.72)), ((91, 91),(0.77, 0.82)), ((92, 92),(0.25, 0.75)),
((93, 93),(0.63, 0.74)), ((94, 94),(0.15, 0.91)), ((95, 95),(0.74, 0.75)),
((96, 96),(0.03, 0.97)), ((97, 97),(0.04, 0.91)), ((98, 98),(0.43, 0.97)),
((99, 99),(0.3, 0.91))))
	 && y >= 0.0 && y <= 1.0 && y.size(100)
	 && y.specV(Set(((0, 0),(0.52, 0.99)), ((1, 1),(0.45, 0.73)), ((2, 2),(0.42, 0.87)),
((3, 3),(0.54, 0.83)), ((4, 4),(0.11, 0.45)), ((5, 5),(0.74, 0.95)),
((6, 6),(0.09, 0.36)), ((7, 7),(0.05, 0.81)), ((8, 8),(0.17, 0.35)),
((9, 9),(0.37, 0.73)), ((10, 10),(0.71, 0.78)), ((11, 11),(0.27, 0.78)),
((12, 12),(0.59, 0.87)), ((13, 13),(0.59, 0.96)), ((14, 14),(0.55, 0.93)),
((15, 15),(0.03, 0.91)), ((16, 16),(0.19, 0.93)), ((17, 17),(0.06, 0.89)),
((18, 18),(0.49, 0.92)), ((19, 19),(0.2, 0.97)), ((20, 20),(0.15, 0.83)),
((21, 21),(0.09, 0.22)), ((22, 22),(0.61, 0.65)), ((23, 23),(0.76, 0.79)),
((24, 24),(0.62, 0.99)), ((25, 25),(0.14, 0.16)), ((26, 26),(0.08, 0.68)),
((27, 27),(0.64, 0.85)), ((28, 28),(0.3, 0.94)), ((29, 29),(0.45, 0.58)),
((30, 30),(0.63, 0.95)), ((31, 31),(0.52, 0.58)), ((32, 32),(0.6, 0.86)),
((33, 33),(0.75, 0.9)), ((34, 34),(0.45, 0.67)), ((35, 35),(0.24, 0.88)),
((36, 36),(0.19, 0.75)), ((37, 37),(0.43, 0.75)), ((38, 38),(0.21, 0.64)),
((39, 39),(0.55, 0.67)), ((40, 40),(0.2, 0.24)), ((41, 41),(0.21, 0.96)),
((42, 42),(0.49, 0.97)), ((43, 43),(0.43, 0.59)), ((44, 44),(0.57, 0.58)),
((45, 45),(0.03, 0.59)), ((46, 46),(0.41, 0.97)), ((47, 47),(0.61, 0.92)),
((48, 48),(0.04, 0.47)), ((49, 49),(0.59, 0.87)), ((50, 50),(0.53, 0.58)),
((51, 51),(0.21, 0.27)), ((52, 52),(0.16, 0.26)), ((53, 53),(0.09, 0.12)),
((54, 54),(0.17, 0.56)), ((55, 55),(0.07, 0.71)), ((56, 56),(0.23, 0.72)),
((57, 57),(0.57, 0.89)), ((58, 58),(0.43, 0.84)), ((59, 59),(0.37, 0.62)),
((60, 60),(0.08, 0.46)), ((61, 61),(0.24, 0.76)), ((62, 62),(0.09, 0.32)),
((63, 63),(0.41, 0.57)), ((64, 64),(0.17, 0.91)), ((65, 65),(0.26, 0.49)),
((66, 66),(0.75, 0.8)), ((67, 67),(0.46, 0.75)), ((68, 68),(0.08, 0.85)),
((69, 69),(0.21, 0.54)), ((70, 70),(0.64, 0.89)), ((71, 71),(0.83, 0.88)),
((72, 72),(0.06, 0.71)), ((73, 73),(0.71, 0.95)), ((74, 74),(0.45, 0.7)),
((75, 75),(0.57, 0.86)), ((76, 76),(0.67, 0.93)), ((77, 77),(0.72, 1.0)),
((78, 78),(0.11, 0.37)), ((79, 79),(0.45, 0.86)), ((80, 80),(0.15, 0.85)),
((81, 81),(0.37, 0.72)), ((82, 82),(0.07, 0.71)), ((83, 83),(0.29, 0.49)),
((84, 84),(0.24, 0.33)), ((85, 85),(0.16, 0.58)), ((86, 86),(0.48, 0.97)),
((87, 87),(0.42, 0.76)), ((88, 88),(0.76, 0.79)), ((89, 89),(0.61, 0.79)),
((90, 90),(0.58, 0.64)), ((91, 91),(0.02, 0.72)), ((92, 92),(0.26, 0.94)),
((93, 93),(0.28, 0.37)), ((94, 94),(0.32, 0.36)), ((95, 95),(0.49, 0.76)),
((96, 96),(0.21, 0.42)), ((97, 97),(0.4, 1.0)), ((98, 98),(0.02, 0.42)),
((99, 99),(0.1, 0.75))))
	)

        //x := x + 0.01 * (-2*x - 3*y + x*x)
        val x1: Real = y.fold(x.head)((acc: Real, yi: Real) => {acc + 0.01 * (-2*acc - 3*yi + acc*acc)})
        //y := y + 0.01 * (x + y)
        val y1: Real = x.fold(y.head)((acc: Real, xi: Real) => {acc + 0.01 * (xi + acc)})
        Vector(List(x1, y1))
    }


}