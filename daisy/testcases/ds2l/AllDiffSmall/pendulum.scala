import daisy.lang._
import Real._
import daisy.lang.Vector._

object pendulum {

	def pendulum(t: Vector, w: Vector): Vector = {
require(t >= -2.0 && t <= 2.0 && t.size(100)
	 && t.specV(Set(((0, 0),(-1.5, 0.26)), ((1, 1),(-1.7, -1.51)), ((2, 2),(0.1, 1.74)),
((3, 3),(-0.1, 0.43)), ((4, 4),(-1.82, 1.21)), ((5, 5),(-0.11, 0.55)),
((6, 6),(-0.61, 1.25)), ((7, 7),(-1.37, -0.09)), ((8, 8),(-0.89, 0.96)),
((9, 9),(-1.6, -0.13)), ((10, 10),(-1.34, 1.58)), ((11, 11),(-0.82, 0.9)),
((12, 12),(0.41, 1.22)), ((13, 13),(-1.4, 1.71)), ((14, 14),(-0.17, 1.48)),
((15, 15),(-1.32, 1.7)), ((16, 16),(1.21, 1.86)), ((17, 17),(0.02, 0.84)),
((18, 18),(-0.68, 0.06)), ((19, 19),(1.26, 1.84)), ((20, 20),(-1.34, -0.78)),
((21, 21),(-0.93, 1.19)), ((22, 22),(0.06, 0.45)), ((23, 23),(1.51, 1.57)),
((24, 24),(-1.23, 0.08)), ((25, 25),(0.83, 1.81)), ((26, 26),(-0.94, -0.72)),
((27, 27),(-0.88, 1.42)), ((28, 28),(-1.32, 0.61)), ((29, 29),(-0.97, 1.04)),
((30, 30),(-0.24, 1.98)), ((31, 31),(0.09, 0.25)), ((32, 32),(0.3, 1.91)),
((33, 33),(-1.81, -1.08)), ((34, 34),(0.09, 1.95)), ((35, 35),(-0.13, 0.58)),
((36, 36),(-1.75, -0.37)), ((37, 37),(1.05, 1.14)), ((38, 38),(-1.97, -0.73)),
((39, 39),(-1.97, 0.56)), ((40, 40),(-0.97, -0.28)), ((41, 41),(0.22, 1.67)),
((42, 42),(-1.78, 1.25)), ((43, 43),(-1.8, 1.77)), ((44, 44),(-1.8, -0.27)),
((45, 45),(-0.91, -0.71)), ((46, 46),(-0.46, -0.31)), ((47, 47),(-1.87, -0.94)),
((48, 48),(0.43, 0.99)), ((49, 49),(-1.21, 0.33)), ((50, 50),(-1.95, -0.5)),
((51, 51),(-0.17, 0.26)), ((52, 52),(-0.13, 1.75)), ((53, 53),(0.51, 1.32)),
((54, 54),(-1.21, 1.66)), ((55, 55),(0.08, 0.95)), ((56, 56),(-0.3, 0.66)),
((57, 57),(-1.28, 0.54)), ((58, 58),(-0.29, 0.83)), ((59, 59),(-1.09, 0.21)),
((60, 60),(-1.52, 1.71)), ((61, 61),(0.9, 1.84)), ((62, 62),(-0.08, 1.98)),
((63, 63),(-0.34, 0.33)), ((64, 64),(-0.54, 0.8)), ((65, 65),(-0.34, -0.11)),
((66, 66),(-1.03, 0.59)), ((67, 67),(-1.63, -1.02)), ((68, 68),(-0.18, 1.71)),
((69, 69),(-0.85, 0.08)), ((70, 70),(1.11, 1.63)), ((71, 71),(-1.09, -0.98)),
((72, 72),(-1.05, -0.0)), ((73, 73),(-1.78, 0.57)), ((74, 74),(-1.3, -0.43)),
((75, 75),(-1.71, -0.07)), ((76, 76),(0.08, 0.79)), ((77, 77),(-1.81, 1.93)),
((78, 78),(-1.98, -1.33)), ((79, 79),(-1.59, 0.86)), ((80, 80),(-1.65, -0.56)),
((81, 81),(1.3, 1.41)), ((82, 82),(-0.64, 1.03)), ((83, 83),(0.3, 1.87)),
((84, 84),(0.54, 0.99)), ((85, 85),(-0.84, -0.51)), ((86, 86),(0.43, 1.15)),
((87, 87),(0.53, 1.84)), ((88, 88),(0.81, 1.41)), ((89, 89),(-1.13, 1.96)),
((90, 90),(-1.65, 1.72)), ((91, 91),(-1.32, -0.72)), ((92, 92),(-0.69, 0.89)),
((93, 93),(0.8, 1.79)), ((94, 94),(1.14, 1.73)), ((95, 95),(-0.01, 1.78)),
((96, 96),(1.28, 1.53)), ((97, 97),(-1.71, -0.84)), ((98, 98),(-0.43, 0.91)),
((99, 99),(-1.24, -0.22))))
	 && w >= -5.0 && w <= 5.0 && w.size(100)
	 && w.specV(Set(((0, 0),(2.43, 4.89)), ((1, 1),(0.98, 2.02)), ((2, 2),(-4.81, 0.01)),
((3, 3),(0.21, 2.7)), ((4, 4),(-1.57, -0.8)), ((5, 5),(1.07, 4.39)),
((6, 6),(-3.7, 0.64)), ((7, 7),(-4.6, -0.29)), ((8, 8),(-0.15, 1.09)),
((9, 9),(-1.9, 2.88)), ((10, 10),(-0.96, -0.04)), ((11, 11),(-4.13, 2.02)),
((12, 12),(-2.45, -0.89)), ((13, 13),(-3.78, 3.24)), ((14, 14),(-4.84, -1.89)),
((15, 15),(-3.2, -3.1)), ((16, 16),(-2.87, 2.16)), ((17, 17),(-3.6, 1.86)),
((18, 18),(-2.87, -2.13)), ((19, 19),(-3.43, -2.69)), ((20, 20),(-1.87, 1.55)),
((21, 21),(-2.53, -2.23)), ((22, 22),(-3.96, -2.53)), ((23, 23),(-2.5, 2.58)),
((24, 24),(-3.19, 3.37)), ((25, 25),(-2.57, 2.34)), ((26, 26),(-4.96, -4.1)),
((27, 27),(-1.47, -0.14)), ((28, 28),(-0.5, 1.37)), ((29, 29),(-4.5, -4.05)),
((30, 30),(1.04, 4.77)), ((31, 31),(2.06, 4.68)), ((32, 32),(2.3, 4.81)),
((33, 33),(-1.78, -0.08)), ((34, 34),(-4.78, 4.14)), ((35, 35),(-4.13, 2.4)),
((36, 36),(-4.96, 2.37)), ((37, 37),(3.25, 3.98)), ((38, 38),(1.61, 3.95)),
((39, 39),(0.83, 3.23)), ((40, 40),(0.73, 3.3)), ((41, 41),(-2.79, -1.27)),
((42, 42),(0.48, 2.92)), ((43, 43),(-1.92, 1.38)), ((44, 44),(-4.11, 5.0)),
((45, 45),(-4.23, -2.2)), ((46, 46),(0.43, 2.06)), ((47, 47),(-2.75, 3.28)),
((48, 48),(-2.12, 2.27)), ((49, 49),(-4.02, -3.32)), ((50, 50),(-2.0, -1.18)),
((51, 51),(-2.76, -0.16)), ((52, 52),(0.19, 4.79)), ((53, 53),(-1.61, -0.7)),
((54, 54),(-4.31, 3.37)), ((55, 55),(-2.09, 3.02)), ((56, 56),(4.61, 4.83)),
((57, 57),(-4.84, 3.56)), ((58, 58),(1.9, 2.56)), ((59, 59),(-0.61, 2.99)),
((60, 60),(-4.71, 1.21)), ((61, 61),(-3.3, 1.79)), ((62, 62),(-3.5, 1.9)),
((63, 63),(-2.59, -2.2)), ((64, 64),(-3.99, 1.45)), ((65, 65),(-4.51, 3.93)),
((66, 66),(-0.72, 0.36)), ((67, 67),(-3.1, 0.91)), ((68, 68),(-4.23, 4.75)),
((69, 69),(-2.05, 4.76)), ((70, 70),(-3.91, -0.64)), ((71, 71),(-0.84, 2.16)),
((72, 72),(0.43, 1.11)), ((73, 73),(-3.61, -2.08)), ((74, 74),(-3.8, 4.28)),
((75, 75),(-4.91, 2.93)), ((76, 76),(0.63, 2.17)), ((77, 77),(1.16, 4.06)),
((78, 78),(-1.76, -0.13)), ((79, 79),(-4.41, -3.48)), ((80, 80),(-3.03, 3.7)),
((81, 81),(-2.81, 1.31)), ((82, 82),(0.7, 0.73)), ((83, 83),(-3.52, -2.34)),
((84, 84),(-4.79, 0.08)), ((85, 85),(-3.6, -2.52)), ((86, 86),(-0.12, 3.73)),
((87, 87),(-2.35, -2.34)), ((88, 88),(2.64, 3.49)), ((89, 89),(0.22, 1.59)),
((90, 90),(1.12, 3.63)), ((91, 91),(2.5, 3.38)), ((92, 92),(0.31, 2.71)),
((93, 93),(-3.49, -1.74)), ((94, 94),(-2.66, 1.33)), ((95, 95),(-3.62, 0.02)),
((96, 96),(-4.73, -2.47)), ((97, 97),(4.38, 4.51)), ((98, 98),(-4.9, -2.48)),
((99, 99),(1.09, 4.25))))
	)

        val h: Real = 0.01
        val L: Real = 2.0
        val g: Real = 9.80665

        val iter = Vector.zip(t,w)
        val init = Vector(List(t.head, w.head))

        iter.fold(init)((acc, x) => {
            val kt = acc.at(1)
            val kw = -g/L * sin(acc.head)

            val v = Vector(List(kt,kw))
            acc + v*h
        })
    }


}