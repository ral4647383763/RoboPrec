import daisy.lang._
import Real._
import daisy.lang.Vector._

object pendulum {

	def pendulum(t: Vector, w: Vector): Vector = {
require(t >= -2.0 && t <= 2.0 && t.size(100)
	 && t.specV(Set(((1, 1),(-0.3, 1.63)), ((2, 8),(0.2, 1.09)), ((9, 9),(-1.92, 1.55)),
((10, 12),(-1.23, 1.13)), ((13, 23),(-1.02, 0.34)), ((25, 26),(-0.89, 0.63)),
((27, 37),(-0.81, 0.39)), ((45, 55),(-1.0, 0.01)), ((56, 59),(-1.11, 1.55)),
((76, 86),(-0.67, 0.95)), ((0, 0),(-0.33, -0.02)), ((24, 24),(-0.51, 1.97)),
((38, 39),(-1.57, 0.43)), ((40, 40),(-1.11, 1.53)), ((41, 42),(-1.97, -1.05)),
((43, 44),(1.01, 1.85)), ((60, 61),(-0.82, -0.72)), ((62, 63),(0.0, 0.02)),
((70, 71),(-0.47, 0.7)), ((72, 73),(-1.98, 1.29)), ((74, 74),(-0.37, 0.02)),
((75, 75),(-1.73, 1.3)), ((87, 88),(-0.68, 1.88)), ((89, 89),(-1.63, -0.47)),
((90, 91),(-1.74, -0.67)), ((93, 93),(-1.89, -0.7)), ((94, 95),(-0.4, 0.62)),
((96, 96),(0.25, 1.6)), ((97, 97),(-1.14, 1.27)), ((98, 99),(-1.32, 1.3))))
	 && w >= -5.0 && w <= 5.0 && w.size(100)
	 && w.specV(Set(((35, 45),(-2.09, 1.26)), ((48, 51),(-3.05, 3.78)), ((53, 53),(0.31, 1.5)),
((54, 64),(1.37, 1.63)), ((65, 67),(-4.9, -1.0)), ((69, 79),(-1.37, 0.21)),
((81, 82),(1.3, 4.27)), ((83, 85),(1.53, 1.58)), ((86, 94),(-1.5, 2.94)),
((95, 99),(-3.7, 3.85)), ((0, 0),(-0.19, 1.95)), ((1, 3),(-0.27, 0.26)),
((7, 9),(2.97, 3.45)), ((10, 12),(-4.16, -1.64)), ((13, 13),(-1.61, -0.54)),
((14, 16),(-3.15, 4.9)), ((17, 17),(-4.51, 0.61)), ((18, 18),(-4.17, 0.85)),
((19, 19),(-2.27, 2.27)), ((20, 20),(-2.34, -0.89)), ((21, 23),(-1.72, 1.94)),
((24, 26),(-1.22, 2.98)), ((27, 27),(-3.9, 3.12)), ((28, 29),(-0.55, 3.89)),
((30, 32),(-2.99, -2.85)), ((33, 34),(-3.2, -2.74)), ((46, 47),(-3.15, 0.49)),
((52, 52),(-3.54, 3.04)), ((68, 68),(-0.25, 4.18)), ((80, 80),(0.42, 4.12))))
	)

        val h: Real = 0.01
        val L: Real = 2.0
        val g: Real = 9.80665

        val iter = Vector.zip(t,w)
        val init = Vector(List(t.head, w.head))

        iter.fold(init)((acc, x) => {
            val kt = acc.at(1)
            val kw = -g/L * sin(acc.head)

            val v = Vector(List(kt,kw))
            acc + v*h
        })
    }


}