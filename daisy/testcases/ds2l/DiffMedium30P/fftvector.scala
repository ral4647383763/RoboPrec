import daisy.lang._
import Real._
import daisy.lang.Vector._

object fftvector {

	def fftvector(vr: Vector, vi: Vector): Vector = {
require(vr >= 68.9 && vr <= 160.43 && vr.size(128)
	 && vr.specV(Set(((0, 2),(103.94, 123.56)), ((3, 3),(90.69, 129.97)), ((4, 4),(131.35, 148.84)),
((5, 15),(129.12, 156.57)), ((28, 34),(92.12, 121.52)), ((55, 65),(128.64, 144.61)),
((68, 70),(69.01, 115.66)), ((74, 79),(87.43, 143.66)), ((99, 109),(104.94, 158.83)),
((111, 111),(110.47, 118.64)), ((113, 117),(123.58, 146.69)), ((118, 122),(110.61, 151.14)),
((16, 18),(140.04, 145.92)), ((25, 25),(101.04, 123.86)), ((26, 27),(79.31, 81.96)),
((35, 35),(74.88, 150.57)), ((36, 36),(106.79, 136.37)), ((37, 38),(117.57, 148.16)),
((39, 39),(73.48, 131.57)), ((40, 42),(93.97, 155.09)), ((45, 47),(102.51, 104.01)),
((52, 52),(111.59, 129.72)), ((66, 66),(93.4, 122.53)), ((67, 67),(89.89, 112.04)),
((71, 73),(80.54, 143.29)), ((80, 80),(92.95, 122.03)), ((82, 82),(92.85, 139.54)),
((83, 85),(107.76, 128.68)), ((86, 87),(118.82, 124.1)), ((88, 89),(109.79, 135.99)),
((90, 90),(72.36, 142.53)), ((91, 93),(75.22, 115.52)), ((94, 95),(136.41, 138.52)),
((110, 110),(100.0, 133.55)), ((112, 112),(117.12, 120.46)), ((123, 125),(78.02, 129.52)),
((126, 126),(71.44, 116.49)), ((127, 127),(109.56, 113.43))))
	 && vi >= -133.21 && vi <= 723.11 && vi.size(128)
	 && vi.specV(Set(((10, 17),(-110.26, 141.88)), ((51, 61),(124.72, 612.16)), ((62, 62),(600.81, 712.06)),
((63, 63),(29.02, 636.77)), ((64, 64),(178.99, 547.27)), ((65, 65),(134.64, 454.91)),
((66, 66),(57.43, 209.41)), ((67, 67),(86.47, 467.1)), ((68, 78),(481.01, 632.65)),
((89, 98),(-59.98, 498.89)), ((99, 99),(440.87, 647.4)), ((102, 112),(228.16, 477.6)),
((3, 5),(407.95, 483.53)), ((6, 6),(-73.63, 105.32)), ((7, 7),(214.52, 511.87)),
((8, 9),(375.55, 477.69)), ((18, 20),(445.5, 678.28)), ((21, 22),(107.81, 515.43)),
((23, 25),(488.53, 612.24)), ((26, 28),(114.9, 457.01)), ((29, 31),(197.59, 661.99)),
((32, 32),(181.77, 365.44)), ((33, 34),(265.89, 585.63)), ((35, 35),(377.92, 633.19)),
((36, 38),(-69.8, 597.88)), ((40, 42),(640.12, 674.7)), ((79, 81),(56.37, 552.22)),
((82, 83),(416.48, 446.53)), ((84, 86),(14.19, 625.48)), ((87, 87),(182.65, 269.01)),
((88, 88),(-108.16, 31.06)), ((100, 101),(118.2, 679.17)), ((113, 113),(38.24, 670.66)),
((114, 114),(245.84, 487.33)), ((115, 117),(-127.71, 439.35)), ((122, 124),(278.12, 387.27)),
((125, 125),(117.76, 419.28)), ((126, 127),(-0.89, 102.04))))
	)

        /* v: (real part of signal / Fourier coeff., imaginary part of signal / Fourier coeff. ) */
        if (vr.length() == 1)
            Vector(List(vr.head, vi.head))
        else {
            val scalar: Real = 1
            val Pi: Real = 3.1415926
            val n: Int = vr.length()
            val direction: Vector = Vector(List(0.0, -2.0))
            val evens: Vector = fftvector(vr.everyNth(2, 0), vi.everyNth(2, 0))
            val odds: Vector = fftvector(vr.everyNth(2, 1), vi.everyNth(2, 1))

            val resleft: Vector = evens.enumSlideFlatMap(2)((k, xv) => {
                val base: Vector = xv / scalar

                val oddV: Vector = odds.slice(2 * k, 2 * k + 1)
                val expV: Vector = (direction.*(Pi * k / n)).exp()
                val offset: Vector = (oddV x expV) / scalar
                base + offset
            })

            val resright: Vector = evens.enumSlideFlatMap(2)((k, xv) => {
                val base: Vector = xv / scalar

                val oddV: Vector = odds.slice(2 * k, 2 * k + 1)
                val expV: Vector = (direction.*(Pi * k / n)).exp()
                val offset: Vector = (oddV x expV) / scalar
                base - offset
            })

            resleft ++ resright
        }
    }


}