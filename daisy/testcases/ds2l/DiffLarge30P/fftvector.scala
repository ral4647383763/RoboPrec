import daisy.lang._
import Real._
import daisy.lang.Vector._

object fftvector {

	def fftvector(vr: Vector, vi: Vector): Vector = {
require(vr >= 68.9 && vr <= 160.43 && vr.size(512)
	 && vr.specV(Set(((0, 1),(108.48, 116.69)), ((2, 2),(109.97, 145.55)), ((3, 3),(101.07, 141.52)),
((4, 8),(92.11, 102.3)), ((9, 10),(88.08, 117.97)), ((11, 21),(108.3, 125.92)),
((22, 22),(94.85, 105.28)), ((23, 33),(131.56, 148.67)), ((34, 35),(124.61, 139.97)),
((36, 38),(116.17, 129.23)), ((39, 39),(114.03, 117.94)), ((40, 41),(106.21, 152.55)),
((42, 48),(140.07, 154.29)), ((49, 56),(76.54, 152.22)), ((57, 57),(98.8, 156.19)),
((58, 58),(101.78, 154.82)), ((59, 69),(143.93, 153.12)), ((70, 71),(116.21, 145.72)),
((72, 72),(89.6, 136.33)), ((73, 73),(99.76, 150.2)), ((74, 75),(90.85, 107.52)),
((76, 76),(102.91, 128.05)), ((77, 77),(125.2, 152.4)), ((78, 88),(129.71, 156.58)),
((89, 95),(74.05, 134.36)), ((100, 110),(74.59, 136.94)), ((184, 185),(96.43, 100.45)),
((221, 231),(88.72, 115.36)), ((261, 266),(126.18, 160.38)), ((267, 269),(107.2, 127.08)),
((270, 273),(105.17, 120.22)), ((274, 276),(108.61, 146.76)), ((277, 287),(119.69, 122.74)),
((289, 291),(82.28, 88.99)), ((293, 303),(113.04, 114.15)), ((304, 308),(108.26, 129.01)),
((309, 310),(124.93, 135.71)), ((314, 324),(88.12, 141.21)), ((325, 326),(71.85, 103.75)),
((327, 337),(97.29, 139.42)), ((345, 345),(120.6, 145.33)), ((346, 347),(91.3, 128.35)),
((349, 355),(69.89, 126.34)), ((381, 385),(77.21, 139.05)), ((386, 388),(111.51, 133.26)),
((391, 394),(70.56, 73.1)), ((397, 399),(136.45, 147.94)), ((401, 401),(130.88, 146.35)),
((402, 412),(108.88, 120.53)), ((418, 428),(92.15, 103.73)), ((447, 457),(113.68, 150.23)),
((96, 98),(96.12, 120.69)), ((99, 99),(115.09, 118.35)), ((111, 111),(86.74, 112.57)),
((112, 114),(76.7, 156.66)), ((115, 117),(94.71, 117.69)), ((118, 118),(81.45, 93.92)),
((119, 121),(122.9, 126.25)), ((122, 122),(111.78, 129.42)), ((123, 125),(105.86, 122.82)),
((126, 128),(73.52, 86.37)), ((129, 130),(152.73, 154.62)), ((131, 133),(100.58, 132.58)),
((134, 135),(80.33, 135.03)), ((136, 136),(91.22, 142.14)), ((137, 139),(80.89, 125.29)),
((143, 145),(122.39, 127.18)), ((146, 148),(86.28, 137.99)), ((149, 149),(101.11, 140.36)),
((150, 150),(85.95, 92.68)), ((151, 153),(110.76, 141.29)), ((154, 155),(149.05, 152.22)),
((156, 158),(69.77, 119.1)), ((186, 187),(74.21, 125.04)), ((190, 192),(107.41, 155.07)),
((193, 194),(81.59, 128.7)), ((195, 197),(89.18, 103.98)), ((198, 198),(82.46, 84.95)),
((199, 201),(132.63, 137.39)), ((202, 202),(78.49, 108.07)), ((203, 203),(107.2, 122.32)),
((204, 206),(71.76, 77.74)), ((207, 208),(79.11, 120.82)), ((209, 209),(79.69, 135.74)),
((210, 211),(153.53, 159.01)), ((212, 214),(84.02, 131.65)), ((215, 215),(110.25, 113.26)),
((216, 216),(136.26, 142.17)), ((217, 217),(112.27, 146.04)), ((218, 220),(111.68, 131.83)),
((234, 236),(91.83, 128.61)), ((237, 238),(95.42, 121.75)), ((239, 239),(69.74, 154.31)),
((240, 240),(84.81, 115.66)), ((241, 242),(72.16, 121.57)), ((243, 244),(93.88, 142.87)),
((245, 245),(119.83, 155.61)), ((246, 248),(142.18, 148.07)), ((249, 249),(79.96, 158.86)),
((250, 251),(135.06, 143.68)), ((252, 252),(81.42, 122.67)), ((253, 255),(77.01, 80.17)),
((288, 288),(106.37, 110.03)), ((292, 292),(148.89, 160.02)), ((311, 313),(70.33, 121.95)),
((338, 339),(129.5, 135.76)), ((340, 340),(95.82, 136.96)), ((341, 342),(89.83, 96.36)),
((343, 343),(82.6, 109.13)), ((344, 344),(121.46, 126.75)), ((348, 348),(77.61, 118.04)),
((356, 356),(80.44, 152.45)), ((357, 358),(78.93, 144.42)), ((359, 359),(89.41, 132.04)),
((360, 362),(76.92, 78.73)), ((363, 363),(78.59, 89.68)), ((364, 366),(119.14, 125.14)),
((367, 368),(86.69, 134.44)), ((369, 369),(95.8, 110.15)), ((370, 372),(134.12, 157.11)),
((373, 373),(102.59, 136.01)), ((374, 375),(115.49, 148.14)), ((376, 376),(133.88, 149.9)),
((377, 378),(79.68, 143.99)), ((379, 380),(92.75, 111.06)), ((389, 389),(101.44, 153.81)),
((390, 390),(116.89, 156.99)), ((395, 395),(120.26, 134.15)), ((396, 396),(91.79, 119.59)),
((400, 400),(80.86, 132.72)), ((413, 415),(84.65, 159.16)), ((417, 417),(79.46, 149.14)),
((429, 430),(114.26, 154.63)), ((431, 432),(83.75, 100.74)), ((433, 433),(143.54, 153.03)),
((434, 436),(133.96, 153.94)), ((437, 439),(88.36, 109.97)), ((440, 440),(99.33, 106.62)),
((441, 441),(85.2, 90.65)), ((442, 444),(136.04, 157.54)), ((445, 445),(118.36, 148.6)),
((446, 446),(70.34, 129.81)), ((458, 460),(110.07, 144.38)), ((461, 463),(73.53, 89.57)),
((476, 478),(133.66, 147.5)), ((483, 485),(140.85, 141.89)), ((490, 492),(86.07, 98.91)),
((501, 503),(127.38, 147.49)), ((504, 504),(123.9, 148.57)), ((505, 507),(134.96, 154.14)),
((508, 508),(85.47, 117.16)), ((509, 510),(84.87, 94.55)), ((511, 511),(115.08, 154.3))))
	 && vi >= -133.21 && vi <= 723.11 && vi.size(512)
	 && vi.specV(Set(((0, 10),(448.94, 540.74)), ((11, 13),(-82.76, 426.63)), ((14, 24),(116.07, 397.85)),
((25, 26),(25.87, 353.24)), ((27, 27),(660.32, 669.29)), ((28, 28),(-97.09, 290.74)),
((29, 29),(8.57, 498.82)), ((30, 30),(362.82, 427.92)), ((31, 32),(239.9, 584.43)),
((33, 43),(31.48, 125.97)), ((46, 46),(30.12, 281.13)), ((47, 49),(154.21, 498.34)),
((50, 50),(154.87, 693.6)), ((51, 51),(164.42, 423.69)), ((53, 54),(561.74, 595.07)),
((55, 57),(495.8, 662.53)), ((58, 59),(-95.84, 28.32)), ((60, 61),(-10.54, 580.32)),
((62, 67),(-131.2, 391.35)), ((68, 68),(10.17, 719.22)), ((71, 72),(-14.58, 198.87)),
((73, 83),(-107.07, 684.2)), ((84, 84),(134.64, 588.63)), ((85, 95),(-58.77, 544.02)),
((103, 105),(574.39, 719.07)), ((106, 116),(-45.33, 400.35)), ((117, 126),(-122.57, -121.31)),
((135, 140),(191.23, 193.04)), ((141, 151),(-15.23, 660.5)), ((152, 152),(257.78, 500.2)),
((153, 163),(280.49, 650.98)), ((180, 190),(-87.26, 240.89)), ((214, 215),(163.68, 328.74)),
((277, 287),(166.96, 416.96)), ((294, 304),(176.85, 674.82)), ((313, 323),(28.06, 202.32)),
((326, 327),(-20.54, 541.24)), ((328, 329),(31.8, 390.76)), ((335, 335),(34.24, 713.05)),
((336, 336),(76.55, 677.38)), ((338, 348),(124.63, 330.73)), ((349, 351),(95.37, 497.36)),
((352, 360),(411.43, 607.67)), ((361, 361),(241.61, 497.74)), ((362, 364),(167.57, 531.12)),
((365, 375),(371.78, 470.72)), ((376, 377),(497.37, 617.0)), ((378, 378),(59.24, 439.49)),
((381, 382),(16.4, 441.76)), ((383, 391),(-115.36, 81.27)), ((393, 403),(163.98, 552.34)),
((44, 44),(110.99, 230.3)), ((45, 45),(299.65, 481.59)), ((52, 52),(405.98, 658.78)),
((69, 69),(517.3, 617.57)), ((70, 70),(11.36, 573.23)), ((96, 96),(81.13, 672.66)),
((97, 97),(-47.86, 300.28)), ((98, 100),(-23.47, 236.2)), ((101, 102),(59.93, 345.77)),
((127, 128),(-47.26, 430.75)), ((129, 131),(-27.51, 679.04)), ((132, 132),(174.36, 560.83)),
((133, 134),(416.09, 674.28)), ((166, 167),(-26.34, 35.49)), ((168, 170),(107.97, 219.19)),
((178, 178),(340.6, 467.04)), ((179, 179),(-54.93, 716.09)), ((191, 193),(58.18, 543.86)),
((194, 196),(-62.07, 33.34)), ((204, 206),(108.73, 114.42)), ((207, 209),(170.66, 524.78)),
((210, 211),(-122.6, 176.44)), ((212, 212),(462.66, 629.72)), ((213, 213),(111.65, 288.44)),
((216, 218),(-21.12, 28.76)), ((219, 219),(214.53, 626.3)), ((220, 221),(101.36, 448.86)),
((222, 222),(55.44, 183.29)), ((223, 225),(207.46, 403.72)), ((226, 226),(172.68, 672.21)),
((227, 227),(334.13, 568.99)), ((228, 228),(191.3, 336.05)), ((229, 231),(129.56, 293.05)),
((232, 232),(380.03, 574.33)), ((233, 235),(311.38, 365.14)), ((236, 238),(-92.97, 315.24)),
((240, 241),(539.64, 685.84)), ((249, 251),(-91.42, -40.43)), ((252, 254),(495.46, 623.21)),
((255, 257),(263.0, 325.19)), ((258, 260),(64.66, 499.51)), ((267, 269),(436.81, 499.12)),
((270, 270),(2.68, 268.65)), ((271, 271),(-109.97, 64.75)), ((272, 272),(1.3, 19.63)),
((273, 273),(242.72, 425.69)), ((274, 274),(-61.91, 669.92)), ((275, 276),(259.45, 304.19)),
((288, 288),(-20.55, 580.88)), ((289, 290),(215.02, 634.91)), ((291, 291),(122.0, 315.19)),
((292, 292),(137.23, 162.86)), ((293, 293),(157.05, 312.12)), ((305, 305),(39.47, 200.58)),
((306, 308),(160.25, 405.67)), ((309, 309),(114.99, 396.53)), ((310, 311),(231.43, 275.08)),
((312, 312),(488.99, 554.87)), ((324, 325),(125.65, 651.21)), ((330, 331),(191.38, 233.47)),
((332, 332),(-118.72, 665.25)), ((333, 334),(117.57, 267.88)), ((337, 337),(21.1, 34.58)),
((379, 380),(-61.69, 722.57)), ((392, 392),(302.09, 460.21)), ((404, 404),(497.84, 602.72)),
((405, 405),(119.35, 675.42)), ((406, 408),(93.27, 351.86)), ((409, 409),(405.95, 422.6)),
((410, 410),(-88.95, 77.78)), ((411, 411),(-109.98, 341.85)), ((412, 413),(-51.97, 578.97)),
((414, 415),(13.8, 232.51)), ((416, 416),(270.78, 532.24)), ((417, 417),(425.1, 530.97)),
((418, 418),(52.03, 601.22)), ((419, 420),(203.01, 389.68)), ((421, 421),(158.84, 626.94)),
((422, 424),(62.58, 285.95)), ((427, 429),(221.43, 462.8)), ((430, 432),(-106.4, 359.29)),
((433, 433),(245.27, 693.31)), ((434, 435),(389.92, 639.71)), ((436, 438),(427.01, 429.56)),
((440, 440),(-64.91, 611.53)), ((441, 441),(459.7, 526.86)), ((442, 444),(106.49, 426.08)),
((445, 445),(32.5, 613.45)), ((447, 449),(-109.28, 526.18)), ((452, 454),(269.5, 402.31)),
((455, 457),(-95.36, 675.39)), ((458, 458),(-120.06, 160.69)), ((459, 461),(217.1, 717.07)),
((462, 462),(17.35, 309.02)), ((463, 465),(172.85, 615.55)), ((466, 467),(-125.09, 26.18)),
((468, 470),(-130.23, 620.59)), ((479, 480),(175.36, 224.62)), ((488, 490),(122.26, 562.11)),
((492, 494),(189.51, 427.48)), ((507, 509),(-24.05, 103.79)), ((511, 511),(131.6, 140.37))))
	)

        /* v: (real part of signal / Fourier coeff., imaginary part of signal / Fourier coeff. ) */
        if (vr.length() == 1)
            Vector(List(vr.head, vi.head))
        else {
            val scalar: Real = 1
            val Pi: Real = 3.1415926
            val n: Int = vr.length()
            val direction: Vector = Vector(List(0.0, -2.0))
            val evens: Vector = fftvector(vr.everyNth(2, 0), vi.everyNth(2, 0))
            val odds: Vector = fftvector(vr.everyNth(2, 1), vi.everyNth(2, 1))

            val resleft: Vector = evens.enumSlideFlatMap(2)((k, xv) => {
                val base: Vector = xv / scalar

                val oddV: Vector = odds.slice(2 * k, 2 * k + 1)
                val expV: Vector = (direction.*(Pi * k / n)).exp()
                val offset: Vector = (oddV x expV) / scalar
                base + offset
            })

            val resright: Vector = evens.enumSlideFlatMap(2)((k, xv) => {
                val base: Vector = xv / scalar

                val oddV: Vector = odds.slice(2 * k, 2 * k + 1)
                val expV: Vector = (direction.*(Pi * k / n)).exp()
                val offset: Vector = (oddV x expV) / scalar
                base - offset
            })

            resleft ++ resright
        }
    }


}