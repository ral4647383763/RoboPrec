import daisy.lang._
import Real._
import daisy.lang.Vector._

object sobel3 {

	def sobel3(im: Matrix): Matrix = {
require(im >= 251.34 && im <= 341.89 && im.size(81,81)
	 && im.specM(Set((Set((35, 53)),(285.31, 310.61)), (Set((75, 71), (47, 1)),(289.31, 303.49)),
		(Set((46, 65), (20, 43), (57, 7)),(301.5, 301.85)), (Set((52, 23), (49, 9)),(286.58, 287.93)),
		(Set((80, 42), (29, 58), (48, 42)),(332.33, 340.24)), (Set((33, 51)),(274.8, 332.29)),
		(Set((51, 33)),(266.91, 307.67)), (Set((68, 34)),(273.17, 333.44)),
		(Set((49, 23), (79, 33), (18, 35), (79, 51), (29, 32), (48, 63), (60, 37), (72, 29), (14, 24), (22, 46), (15, 7), (16, 70), (26, 16)),(265.28, 310.27)), (Set((7, 21), (9, 49), (79, 46), (28, 62), (70, 77), (40, 36), (5, 78), (33, 15), (72, 6), (41, 37), (64, 2), (52, 46), (25, 29), (53, 11), (44, 42), (39, 76), (31, 72), (14, 1), (37, 3), (37, 21), (74, 70), (15, 2), (1, 67), (35, 78)),(286.64, 315.49)),
		(Set((18, 7), (28, 39), (71, 19), (21, 18), (29, 40), (10, 8), (6, 56), (21, 54), (62, 55), (2, 22), (39, 71), (62, 73), (54, 69), (4, 68), (74, 65), (24, 64), (67, 44), (35, 73), (78, 53), (70, 49), (9, 39), (28, 52), (40, 26), (5, 68), (29, 35), (75, 2), (61, 67), (80, 80), (40, 44), (73, 41), (52, 18), (42, 72), (21, 49), (10, 21), (20, 53), (74, 42), (43, 36), (31, 80), (37, 11), (14, 9), (51, 58), (3, 18), (59, 17), (1, 57), (67, 39), (36, 33), (79, 13)),(293.77, 337.61)), (Set((40, 3), (40, 21), (63, 23), (77, 70), (9, 52), (29, 30), (61, 62), (6, 46), (19, 65), (39, 43), (54, 41), (10, 16), (20, 48), (66, 15), (11, 79), (25, 14), (62, 63), (2, 30), (20, 66), (66, 33), (22, 8), (12, 62), (72, 76), (55, 5), (51, 53), (70, 3), (12, 80), (13, 45), (35, 45), (36, 10), (47, 19), (36, 28), (9, 11), (5, 22)),(279.46, 300.53)),
		(Set((79, 8), (48, 2), (17, 33), (28, 42), (38, 74), (58, 52), (50, 48), (69, 61), (42, 44), (18, 77), (61, 57), (73, 31), (19, 78), (51, 30), (66, 28), (43, 26), (12, 57), (1, 29), (67, 11), (12, 75), (35, 40), (28, 1), (38, 69), (77, 60), (50, 43), (18, 72), (27, 59), (39, 33), (27, 77), (0, 60), (66, 5), (54, 49), (4, 30), (51, 25), (20, 56), (35, 17), (31, 65), (32, 30), (76, 36), (36, 0), (55, 13), (56, 76), (57, 41), (34, 76), (38, 46), (38, 64), (50, 38), (73, 3), (69, 51), (42, 34), (61, 47), (8, 41), (27, 54), (50, 56), (42, 52), (8, 59), (31, 24), (54, 26), (0, 55), (11, 64), (20, 51), (43, 16), (12, 47), (35, 12), (32, 25), (64, 57), (72, 79), (22, 60), (77, 14), (58, 19), (49, 50), (50, 15)),(316.0, 340.16)), (Set((80, 37), (42, 29), (15, 75), (62, 7), (63, 70), (42, 47), (62, 25), (29, 77), (11, 41), (39, 23), (60, 64)),(308.17, 339.78)),
		(Set((75, 62), (33, 65), (75, 80), (44, 74), (1, 14), (24, 16), (34, 48), (35, 25), (22, 55), (46, 22), (3, 60), (49, 27), (76, 44), (69, 5), (14, 69), (15, 34), (61, 1), (80, 14), (77, 27), (9, 9), (69, 23), (38, 54), (79, 55), (15, 52), (26, 61), (61, 37), (63, 65), (62, 20), (31, 14), (54, 16), (41, 46), (31, 32), (60, 77), (64, 47), (1, 9), (16, 7), (53, 56), (22, 50), (45, 52), (34, 61), (68, 35), (65, 48)),(282.31, 315.45)), (Set((78, 67), (26, 38), (50, 5), (69, 18), (30, 8), (0, 4), (19, 17), (30, 26), (48, 62), (27, 39), (39, 13), (0, 40), (23, 5), (60, 54), (20, 18), (11, 49), (44, 46), (4, 10), (25, 51), (1, 4), (24, 6), (2, 67), (76, 16), (68, 12), (56, 56), (67, 53), (14, 59), (58, 4), (77, 17), (69, 13), (15, 42), (26, 51), (27, 16), (28, 79), (8, 21), (30, 21), (40, 53), (6, 60), (39, 8), (0, 35), (41, 36), (60, 49), (12, 9), (72, 23), (2, 44), (10, 66), (33, 68), (34, 33), (3, 27), (22, 40), (67, 48), (49, 12)),(272.7, 335.37)),
		(Set((46, 25), (18, 6), (22, 58), (38, 21), (78, 57), (55, 55), (70, 53), (15, 19), (36, 60), (59, 62), (15, 37), (26, 46), (79, 58), (29, 39), (29, 57), (75, 24), (52, 22), (72, 0), (40, 66), (6, 73), (12, 4), (72, 18), (64, 14), (52, 58), (53, 23), (14, 13), (34, 28), (25, 59), (76, 6), (45, 37), (46, 2), (22, 35), (3, 40), (26, 5), (35, 72), (68, 20), (46, 20), (18, 1), (7, 10), (18, 19), (36, 55), (78, 70), (15, 32), (28, 51), (47, 64), (63, 27), (28, 69), (29, 34), (71, 49), (0, 7), (9, 74), (60, 21), (6, 50), (44, 13), (63, 63), (40, 61), (60, 39), (6, 68), (25, 18), (21, 66), (73, 76), (34, 5), (74, 41), (64, 27), (51, 75), (24, 58), (57, 6), (55, 45), (15, 9), (71, 8), (16, 72), (59, 52), (18, 14), (55, 63), (28, 46), (30, 6), (58, 74), (60, 16), (6, 45), (74, 36), (20, 65), (62, 80)),(325.28, 340.36)), (Set((44, 44), (39, 78), (23, 70), (51, 52), (12, 79), (37, 23), (51, 70), (24, 53), (66, 68), (36, 27), (32, 75), (7, 0), (67, 51), (79, 25)),(297.42, 299.08)),
		(Set((48, 19), (63, 17), (36, 63), (77, 64)),(285.03, 341.87)), (Set((28, 59), (5, 57), (21, 20), (80, 69), (58, 69), (9, 64), (75, 9), (39, 55), (54, 53), (73, 66), (22, 2), (56, 13), (23, 65), (67, 10), (22, 20), (78, 19), (70, 15), (43, 61), (1, 64), (70, 33), (59, 42), (9, 23), (47, 49), (40, 10), (49, 77), (28, 54), (6, 17), (40, 28), (61, 69), (41, 11), (74, 26), (66, 22), (74, 44), (23, 60), (51, 42), (2, 37), (13, 34), (23, 78), (47, 8), (36, 17), (65, 62), (55, 48), (46, 67), (47, 44), (57, 76), (17, 40), (28, 49), (5, 47), (40, 23), (6, 30), (80, 77), (27, 71), (10, 0), (74, 3), (42, 69), (62, 47), (54, 43), (4, 42), (43, 33), (14, 6), (32, 42), (78, 9), (23, 73), (59, 14), (36, 12), (55, 25), (16, 52), (57, 53), (36, 30), (28, 26), (71, 6), (38, 58), (17, 35), (58, 36), (46, 80)),(289.63, 326.51)),
		(Set((6, 7), (5, 42), (27, 48), (18, 79), (42, 46), (21, 23), (80, 72), (30, 53), (0, 49), (73, 33), (19, 62), (44, 6), (31, 36), (73, 51), (51, 14), (23, 32), (0, 67), (66, 30), (35, 24), (78, 4), (23, 68), (1, 31), (76, 43), (4, 73), (28, 3), (24, 51), (3, 77), (76, 61), (68, 57), (76, 79), (68, 75), (69, 40), (46, 75), (40, 13), (49, 80), (77, 62), (19, 39), (73, 28), (0, 44), (20, 22), (62, 37), (11, 53), (11, 71), (13, 1), (12, 54), (13, 19), (72, 68), (24, 28), (34, 60), (22, 67), (1, 44), (37, 65), (16, 42), (77, 21), (68, 52), (58, 26), (46, 70), (61, 31), (58, 44), (18, 69), (42, 36), (39, 30), (23, 22), (74, 6), (19, 70), (43, 0), (4, 27), (41, 76), (1, 3), (51, 22), (32, 27), (45, 46), (64, 59), (1, 21), (16, 19), (77, 16), (65, 60), (38, 43), (14, 76), (57, 56), (61, 8)),(275.64, 277.69)), (Set((80, 21), (27, 15), (58, 39), (30, 20), (27, 33), (73, 0), (18, 64), (30, 38), (71, 76), (63, 72), (42, 49), (19, 47), (75, 46), (8, 56), (31, 21), (20, 30), (11, 61)),(256.87, 319.91)),
		(Set((32, 4), (24, 0), (64, 36), (33, 67), (56, 50), (57, 15), (53, 63), (45, 59), (46, 24), (64, 72), (3, 62), (26, 27), (5, 4), (38, 38), (57, 51), (59, 79), (42, 8), (19, 24), (71, 71), (40, 65), (6, 72), (29, 74), (53, 22), (41, 66), (52, 75), (35, 4), (45, 36), (22, 34), (16, 9), (34, 45), (22, 52), (46, 19), (37, 50), (78, 69), (15, 31), (49, 42), (42, 3), (19, 1), (8, 10), (71, 48), (27, 23), (30, 28), (8, 28), (73, 8), (40, 60), (20, 2), (29, 69), (39, 15), (60, 56), (75, 54), (53, 17), (10, 55), (53, 35), (37, 27), (10, 73), (53, 53), (76, 18)),(280.19, 282.36)), (Set((14, 43), (15, 8), (49, 19), (22, 65), (67, 55), (26, 17), (80, 6), (49, 37), (50, 2), (59, 69), (36, 67), (48, 41), (17, 72), (75, 13), (8, 23), (41, 38), (60, 51), (33, 34), (75, 49), (25, 30), (45, 8), (41, 56), (2, 46), (37, 22), (14, 20), (74, 71), (65, 22), (13, 79), (78, 59), (58, 1), (70, 55), (26, 30), (15, 39), (47, 71), (8, 0), (70, 73), (19, 9), (5, 74), (79, 60), (8, 18), (63, 52), (11, 23), (75, 26), (48, 72), (40, 68), (10, 27), (6, 75), (72, 20), (41, 51), (33, 47), (2, 41), (45, 21), (37, 35), (57, 13), (66, 80), (79, 19), (47, 48), (26, 25), (59, 59), (70, 68), (71, 33), (7, 30), (17, 62), (27, 8), (29, 36), (40, 45), (63, 47), (60, 23), (6, 52), (60, 41), (10, 22), (33, 24)),(299.13, 331.72))))
	)
// 9x9 input image

        val kh: Matrix = Matrix(List(List(-1, 0, 1), List(-2, 0, 2), List(-1, 0, 1)))
        val kv: Matrix = Matrix(List(List(1, 2, 1), List(0, 0, 0), List(-1, -2, -1)))

        val padded: Matrix = im.pad(1,1)

        // inlined convolute 2d for kh
        val flippedKh: Matrix = (kh.flipud()).fliplr()
        val gx: Matrix = padded.slideReduce(3, 1)(m => {
            val tmp: Matrix = flippedKh * m // element-wise multiplication of the kernel and the image
            tmp.foldElements(0.0)((acc, x) => acc + x)
        })
        // inlined convolute 2d for kv
        val flippedKv: Matrix = (kv.flipud()).fliplr()
        val gy: Matrix = padded.slideReduce(3, 1)(m => {
            val tmp: Matrix = flippedKv * m // element-wise multiplication of the kernel and the image
            tmp.foldElements(0.0)((acc, x) => acc + x)
        })

        val pre: Matrix = gx * gx + gy * gy
        val g: Matrix = pre.sqrt()
        g * 255.0 / g.max()
    }


}