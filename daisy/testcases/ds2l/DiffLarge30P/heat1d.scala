import daisy.lang._
import Real._
import daisy.lang.Vector._

object heat1d {

	def heat1d(ax: Vector): Real = {
require(ax >= 1.0 && ax <= 2.0 && ax.size(513)
	 && ax.specV(Set(((3, 8),(1.19, 1.86)), ((9, 13),(1.57, 1.63)), ((35, 39),(1.19, 1.91)),
((40, 45),(1.63, 1.96)), ((46, 46),(1.01, 1.96)), ((50, 60),(1.43, 1.87)),
((61, 62),(1.55, 1.79)), ((63, 64),(1.47, 1.84)), ((65, 71),(1.11, 1.53)),
((72, 82),(1.44, 1.82)), ((83, 83),(1.12, 1.54)), ((84, 85),(1.18, 1.95)),
((86, 86),(1.4, 1.88)), ((87, 94),(1.05, 1.68)), ((96, 100),(1.04, 1.34)),
((101, 101),(1.23, 1.61)), ((102, 103),(1.98, 1.99)), ((105, 106),(1.49, 1.87)),
((107, 117),(1.4, 1.92)), ((118, 119),(1.1, 1.89)), ((131, 134),(1.61, 1.76)),
((135, 135),(1.17, 1.39)), ((136, 136),(1.57, 1.6)), ((137, 137),(1.02, 1.52)),
((138, 138),(1.43, 1.86)), ((139, 149),(1.59, 1.93)), ((151, 161),(1.23, 1.5)),
((239, 249),(1.18, 1.51)), ((294, 304),(1.88, 2.0)), ((307, 308),(1.32, 1.48)),
((309, 311),(1.4, 1.85)), ((312, 312),(1.27, 1.93)), ((313, 323),(1.09, 1.31)),
((324, 324),(1.58, 1.9)), ((325, 332),(1.1, 1.35)), ((334, 336),(1.75, 1.83)),
((340, 342),(1.36, 1.79)), ((344, 347),(1.58, 1.95)), ((348, 348),(1.29, 1.46)),
((349, 349),(1.73, 2.0)), ((350, 360),(1.58, 1.72)), ((361, 362),(1.76, 1.96)),
((363, 363),(1.45, 1.93)), ((364, 364),(1.38, 1.86)), ((365, 366),(1.35, 1.44)),
((367, 371),(1.02, 1.12)), ((372, 382),(1.09, 1.96)), ((446, 456),(1.2, 1.32)),
((479, 483),(1.09, 1.5)), ((485, 485),(1.4, 1.71)), ((486, 491),(1.82, 2.0)),
((0, 0),(1.02, 1.09)), ((1, 1),(1.17, 1.64)), ((2, 2),(1.05, 1.74)),
((14, 15),(1.01, 1.89)), ((16, 16),(1.12, 1.23)), ((17, 17),(1.56, 1.83)),
((18, 18),(1.27, 1.48)), ((19, 21),(1.43, 1.54)), ((22, 22),(1.18, 1.21)),
((23, 25),(1.22, 1.67)), ((26, 28),(1.03, 1.38)), ((29, 29),(1.6, 1.72)),
((30, 30),(1.13, 1.42)), ((31, 33),(1.56, 1.99)), ((34, 34),(1.31, 1.47)),
((47, 47),(1.35, 1.63)), ((48, 49),(1.53, 1.77)), ((95, 95),(1.18, 1.97)),
((104, 104),(1.37, 1.39)), ((120, 120),(1.66, 2.0)), ((121, 123),(1.31, 1.74)),
((124, 124),(1.38, 1.78)), ((125, 126),(1.02, 1.62)), ((127, 128),(1.35, 1.75)),
((129, 129),(1.33, 1.47)), ((130, 130),(1.28, 1.68)), ((150, 150),(1.33, 1.55)),
((162, 163),(1.04, 1.86)), ((164, 166),(1.01, 1.78)), ((167, 168),(1.81, 1.88)),
((169, 170),(1.06, 1.35)), ((171, 171),(1.23, 1.5)), ((172, 174),(1.5, 1.52)),
((175, 175),(1.4, 1.66)), ((176, 178),(1.28, 1.48)), ((179, 181),(1.03, 1.7)),
((183, 185),(1.28, 1.54)), ((187, 189),(1.05, 1.35)), ((208, 210),(1.46, 1.95)),
((211, 211),(1.51, 1.72)), ((215, 215),(1.57, 1.62)), ((217, 218),(1.57, 1.81)),
((250, 252),(1.48, 1.72)), ((253, 253),(1.04, 1.11)), ((254, 256),(1.05, 1.86)),
((258, 259),(1.24, 1.29)), ((260, 262),(1.04, 2.0)), ((271, 273),(1.06, 1.39)),
((274, 276),(1.96, 1.99)), ((277, 277),(1.48, 1.96)), ((278, 278),(1.26, 1.49)),
((279, 281),(1.13, 1.5)), ((282, 284),(1.45, 1.81)), ((285, 287),(1.05, 1.5)),
((288, 290),(1.05, 1.8)), ((291, 292),(1.22, 1.22)), ((293, 293),(1.05, 1.72)),
((305, 305),(1.32, 1.51)), ((306, 306),(1.01, 1.33)), ((333, 333),(1.25, 1.28)),
((337, 337),(1.12, 1.34)), ((338, 339),(1.32, 1.76)), ((343, 343),(1.24, 1.31)),
((383, 385),(1.38, 1.63)), ((396, 398),(1.31, 1.41)), ((414, 416),(1.08, 1.86)),
((417, 418),(1.19, 1.22)), ((419, 419),(1.24, 1.69)), ((420, 422),(1.35, 1.43)),
((423, 423),(1.08, 1.3)), ((424, 424),(1.08, 1.77)), ((425, 426),(1.26, 1.5)),
((427, 427),(1.01, 1.61)), ((428, 430),(1.23, 1.88)), ((431, 431),(1.33, 1.38)),
((432, 434),(1.12, 1.76)), ((435, 437),(1.34, 1.52)), ((438, 439),(1.33, 1.44)),
((440, 440),(1.07, 1.52)), ((441, 443),(1.21, 1.46)), ((444, 445),(1.56, 1.87)),
((457, 457),(1.08, 1.27)), ((458, 460),(1.15, 1.61)), ((461, 463),(1.28, 1.91)),
((464, 466),(1.08, 1.87)), ((467, 469),(1.42, 1.63)), ((470, 471),(1.67, 1.9)),
((472, 473),(1.29, 1.58)), ((475, 475),(1.49, 1.73)), ((476, 478),(1.46, 1.62)),
((484, 484),(1.05, 1.72)), ((492, 494),(1.02, 1.07)), ((495, 495),(1.06, 1.62)),
((496, 498),(1.2, 1.91)), ((499, 499),(1.27, 1.82)), ((500, 502),(1.01, 1.97)),
((503, 504),(1.6, 1.79)), ((505, 505),(1.25, 1.36)), ((506, 506),(1.01, 1.79)),
((507, 507),(1.59, 1.93)), ((508, 510),(1.19, 1.19)), ((511, 512),(1.61, 1.74))))
	)

          if (ax.length() <= 1) {
            ax.head
        } else {
            val coef = Vector(List(0.25, 0.5, 0.25))
            val updCoefs: Vector = ax.slideReduce(3,1)(v =>  (coef*v).sum())
            heat1d(updCoefs)
        }
    }


}