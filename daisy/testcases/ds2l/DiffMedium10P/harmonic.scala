import daisy.lang._
import Real._
import daisy.lang.Vector._

object harmonic {

	def harmonic(x: Vector, y: Vector): Vector = {
require(x >= -5.32 && x <= 725.6 && x.size(1000)
	 && x.specV(Set(((1, 1),(60.41, 200.19)), ((2, 2),(304.57, 686.39)), ((3, 3),(500.2, 674.59)),
((4, 4),(534.55, 601.34)), ((5, 6),(325.63, 453.77)), ((7, 16),(34.37, 505.05)),
((70, 79),(307.77, 368.82)), ((192, 201),(87.98, 673.07)), ((202, 203),(26.61, 551.58)),
((204, 205),(508.33, 583.61)), ((206, 215),(185.59, 394.06)), ((216, 216),(460.65, 703.24)),
((217, 225),(177.18, 392.25)), ((226, 227),(38.08, 256.22)), ((228, 237),(141.9, 295.55)),
((238, 238),(94.49, 221.67)), ((239, 239),(484.64, 511.42)), ((240, 241),(168.55, 171.35)),
((242, 243),(319.96, 371.38)), ((244, 245),(251.57, 678.71)), ((246, 248),(213.5, 641.31)),
((249, 258),(98.39, 406.38)), ((259, 261),(238.49, 590.67)), ((262, 268),(395.41, 550.56)),
((269, 269),(118.36, 481.86)), ((270, 273),(331.76, 432.27)), ((274, 283),(554.68, 602.2)),
((292, 301),(78.35, 206.16)), ((306, 314),(145.57, 258.16)), ((318, 327),(38.78, 199.98)),
((356, 361),(138.75, 507.51)), ((362, 363),(77.27, 322.15)), ((364, 373),(231.84, 337.23)),
((374, 383),(117.54, 259.99)), ((384, 385),(2.58, 47.17)), ((386, 387),(543.2, 719.85)),
((388, 397),(56.06, 518.85)), ((398, 399),(406.67, 711.14)), ((400, 403),(74.21, 352.01)),
((407, 416),(133.41, 312.07)), ((417, 418),(0.75, 391.62)), ((419, 419),(465.76, 666.8)),
((420, 429),(453.51, 678.27)), ((435, 437),(178.44, 471.68)), ((438, 440),(96.02, 174.48)),
((441, 441),(14.9, 560.73)), ((442, 442),(211.26, 608.34)), ((443, 452),(130.44, 461.08)),
((453, 453),(612.84, 672.03)), ((454, 454),(117.81, 568.17)), ((455, 457),(537.26, 601.63)),
((458, 459),(129.57, 233.45)), ((460, 465),(228.69, 597.93)), ((477, 486),(264.04, 397.52)),
((521, 530),(264.59, 602.36)), ((557, 566),(24.83, 169.65)), ((567, 567),(409.02, 453.85)),
((570, 573),(510.4, 593.84)), ((574, 575),(656.31, 685.35)), ((576, 585),(356.03, 359.8)),
((586, 595),(109.79, 213.64)), ((613, 622),(53.32, 419.43)), ((642, 648),(114.29, 497.54)),
((649, 651),(318.62, 703.54)), ((652, 652),(23.88, 60.22)), ((653, 653),(134.15, 315.92)),
((654, 654),(-3.27, 523.1)), ((655, 659),(609.25, 619.86)), ((660, 669),(305.65, 569.86)),
((676, 685),(201.72, 478.28)), ((700, 709),(302.55, 370.83)), ((710, 712),(242.22, 315.33)),
((714, 722),(481.55, 598.47)), ((723, 723),(114.89, 655.43)), ((724, 726),(210.84, 318.59)),
((727, 727),(249.12, 406.46)), ((729, 738),(56.84, 137.51)), ((739, 739),(231.27, 331.25)),
((740, 743),(658.87, 704.62)), ((745, 746),(627.23, 706.87)), ((747, 748),(447.75, 697.69)),
((749, 754),(38.54, 587.56)), ((755, 764),(439.92, 489.11)), ((785, 794),(211.79, 412.13)),
((795, 795),(346.06, 691.11)), ((796, 802),(213.45, 467.85)), ((803, 803),(245.68, 641.62)),
((804, 804),(15.03, 132.71)), ((805, 810),(321.65, 490.74)), ((815, 818),(56.96, 477.44)),
((819, 819),(266.59, 419.18)), ((820, 820),(299.02, 382.05)), ((821, 822),(284.38, 407.51)),
((823, 832),(78.19, 126.61)), ((844, 845),(395.31, 645.19)), ((860, 869),(76.74, 624.86)),
((874, 876),(64.09, 179.96)), ((878, 886),(178.54, 382.63)), ((910, 919),(352.3, 399.63)),
((924, 933),(160.27, 413.28))))
	 && y >= -432.12 && y <= 78.94 && y.size(1000)
	 && y.specV(Set(((0, 0),(-215.82, -156.83)), ((1, 4),(-148.48, -131.37)), ((5, 5),(-124.68, -96.17)),
((6, 15),(-263.04, -53.38)), ((16, 16),(-300.35, -68.54)), ((17, 26),(-42.02, -35.54)),
((27, 27),(-274.07, -37.27)), ((28, 34),(-200.53, 67.38)), ((35, 44),(-289.91, -164.67)),
((45, 47),(-364.73, 48.76)), ((48, 49),(-427.5, -188.98)), ((50, 55),(-97.19, -36.48)),
((56, 65),(-246.86, 73.59)), ((66, 66),(-315.51, -45.46)), ((67, 67),(-417.84, -386.17)),
((68, 70),(-401.37, -363.56)), ((71, 71),(-175.64, -148.36)), ((72, 72),(-339.2, 48.15)),
((73, 73),(-355.81, -245.27)), ((75, 84),(-341.44, -55.09)), ((85, 89),(-349.29, 38.8)),
((106, 115),(-417.28, -34.46)), ((117, 117),(-308.14, 69.91)), ((118, 120),(-177.13, -107.02)),
((122, 131),(-256.2, -23.0)), ((132, 132),(-266.62, -196.98)), ((133, 137),(-377.03, 29.62)),
((139, 141),(-398.68, -57.32)), ((144, 150),(-226.75, -102.25)), ((152, 152),(-401.46, 9.47)),
((153, 161),(-222.62, -143.78)), ((162, 171),(37.61, 50.81)), ((177, 177),(-317.6, -111.62)),
((184, 193),(-303.37, -298.06)), ((203, 205),(-313.87, -210.42)), ((206, 215),(-328.27, -44.14)),
((216, 222),(-279.59, -103.66)), ((223, 228),(-321.42, 76.03)), ((229, 233),(-352.02, -141.06)),
((234, 234),(8.96, 12.13)), ((235, 244),(-295.53, -48.04)), ((246, 246),(-287.71, -11.6)),
((247, 256),(-262.69, -183.97)), ((257, 257),(-349.53, 23.22)), ((258, 264),(-126.71, -83.18)),
((265, 274),(-200.59, -136.1)), ((276, 278),(-324.89, 19.07)), ((299, 308),(-247.95, 19.44)),
((340, 346),(-33.59, 9.1)), ((525, 534),(-338.96, 9.42)), ((535, 536),(-280.03, 76.29)),
((537, 537),(-419.64, -375.11)), ((538, 547),(-427.3, 65.82)), ((550, 552),(-355.05, 33.77)),
((553, 553),(-382.27, -55.97)), ((554, 555),(-345.88, -83.18)), ((556, 565),(-386.01, -258.59)),
((576, 585),(-66.02, 37.29)), ((600, 609),(18.61, 68.54)), ((612, 621),(-415.3, -312.22)),
((654, 663),(-79.77, -27.3)), ((737, 746),(-412.76, -174.15)), ((768, 777),(-313.74, -212.11)),
((783, 792),(-421.93, -378.53)), ((794, 803),(-270.37, 74.23)), ((806, 809),(-370.56, 16.88)),
((855, 864),(-362.71, -183.05)), ((866, 866),(-340.65, -213.14)), ((867, 870),(-356.52, -81.84)),
((875, 877),(-176.22, -54.85)), ((878, 878),(-374.7, -251.42)), ((879, 880),(-178.5, 37.39)),
((884, 887),(-322.17, -253.53)), ((888, 889),(19.22, 62.33)), ((891, 900),(-292.61, -58.33)),
((901, 902),(-341.55, -296.87)), ((903, 905),(-410.05, -396.9)), ((906, 907),(-223.54, -172.12)),
((908, 917),(-246.8, -147.65)), ((918, 918),(-426.71, -80.44)), ((919, 922),(-154.12, -98.34)),
((925, 927),(-151.65, -79.34)), ((928, 928),(14.58, 69.93)), ((930, 939),(-228.06, -65.3)),
((940, 944),(-269.47, -217.91)), ((945, 948),(-234.3, 65.11)), ((949, 950),(-235.15, -222.6)),
((951, 960),(-359.01, 78.1)), ((961, 961),(-429.44, -121.48)), ((962, 966),(-301.97, 41.27)),
((967, 967),(-239.47, -119.91)), ((968, 968),(-330.72, -309.08)), ((969, 978),(-372.75, -1.27)),
((983, 984),(-31.47, 32.19)), ((985, 985),(-406.82, -77.35)), ((986, 987),(-266.35, -101.86)),
((988, 989),(-270.82, -151.57)), ((990, 995),(-431.64, 64.43)), ((996, 997),(-50.76, 4.06)),
((998, 999),(-171.41, -129.42))))
	)

        //x1 := x1 + 0.01 * x2
        val x1: Real = y.fold(x.head)((acc: Real, xi: Real) => {acc + 0.01* xi})
        //x2 := -0.01 * x1 + 0.99 * x2
        val x2: Real = x.fold(y.head)((acc: Real, xi: Real) => {-0.01 * xi + 0.99 * acc})
        Vector(List(x1, x2))
    }


}