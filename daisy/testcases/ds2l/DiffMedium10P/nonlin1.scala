import daisy.lang._
import Real._
import daisy.lang.Vector._

object nonlin1 {

	def nonlin1(x: Vector, y: Vector): Vector = {
require(x >= 0.0 && x <= 1.0 && x.size(1000)
	 && x.specV(Set(((0, 9),(0.23, 0.29)), ((10, 10),(0.32, 0.58)), ((11, 14),(0.15, 0.56)),
((15, 15),(0.32, 0.91)), ((19, 28),(0.15, 0.84)), ((29, 29),(0.8, 0.98)),
((30, 30),(0.03, 0.39)), ((31, 31),(0.38, 0.64)), ((32, 32),(0.22, 0.55)),
((33, 36),(0.09, 0.46)), ((37, 37),(0.43, 0.73)), ((38, 43),(0.11, 0.68)),
((44, 44),(0.12, 0.83)), ((45, 53),(0.92, 1.0)), ((54, 55),(0.53, 0.94)),
((56, 62),(0.29, 0.35)), ((63, 66),(0.5, 0.75)), ((67, 67),(0.09, 0.93)),
((68, 71),(0.48, 0.86)), ((72, 72),(0.54, 0.6)), ((73, 74),(0.09, 0.14)),
((75, 75),(0.27, 0.89)), ((76, 76),(0.23, 0.85)), ((77, 77),(0.03, 0.92)),
((78, 84),(0.6, 0.97)), ((85, 86),(0.34, 0.94)), ((87, 96),(0.05, 0.66)),
((97, 98),(0.33, 0.45)), ((99, 99),(0.25, 0.74)), ((100, 109),(0.18, 0.79)),
((110, 111),(0.07, 0.3)), ((112, 114),(0.1, 0.56)), ((115, 115),(0.55, 0.79)),
((116, 116),(0.46, 0.6)), ((117, 117),(0.03, 0.51)), ((118, 118),(0.1, 0.65)),
((119, 123),(0.13, 0.58)), ((124, 126),(0.35, 0.37)), ((127, 127),(0.16, 0.66)),
((128, 137),(0.17, 0.94)), ((138, 142),(0.33, 0.84)), ((143, 143),(0.48, 0.87)),
((144, 144),(0.09, 0.15)), ((145, 148),(0.12, 0.88)), ((149, 149),(0.5, 0.54)),
((150, 151),(0.12, 0.47)), ((152, 158),(0.16, 0.54)), ((159, 168),(0.37, 0.51)),
((169, 178),(0.2, 0.4)), ((181, 185),(0.13, 0.2)), ((186, 186),(0.24, 0.87)),
((187, 196),(0.5, 0.89)), ((197, 197),(0.02, 0.94)), ((198, 207),(0.49, 0.79)),
((208, 208),(0.57, 0.69)), ((209, 209),(0.23, 0.75)), ((210, 210),(0.15, 0.26)),
((211, 213),(0.03, 0.39)), ((214, 214),(0.29, 0.52)), ((215, 223),(0.08, 0.89)),
((224, 232),(0.23, 0.58)), ((240, 249),(0.6, 0.78)), ((253, 262),(0.06, 0.71)),
((295, 298),(0.25, 0.6)), ((299, 300),(0.04, 0.98)), ((301, 308),(0.62, 0.69)),
((309, 309),(0.34, 0.81)), ((310, 310),(0.46, 0.81)), ((311, 320),(0.01, 0.92)),
((346, 355),(0.41, 0.94)), ((362, 368),(0.09, 0.41)), ((378, 387),(0.24, 0.73)),
((408, 417),(0.15, 0.68)), ((419, 428),(0.14, 0.34)), ((436, 445),(0.2, 0.22)),
((447, 448),(0.33, 0.98)), ((449, 449),(0.79, 1.0)), ((450, 450),(0.48, 0.5)),
((451, 460),(0.78, 0.91)), ((461, 461),(0.64, 0.75)), ((464, 470),(0.2, 0.63)),
((471, 478),(0.79, 0.85)), ((479, 481),(0.09, 0.72)), ((491, 500),(0.16, 0.35)),
((507, 513),(0.67, 0.97)), ((514, 514),(0.13, 0.75)), ((515, 524),(0.83, 0.94)),
((525, 525),(0.74, 0.9)), ((526, 528),(0.8, 0.83)), ((529, 530),(0.44, 0.59)),
((531, 540),(0.78, 0.83)), ((576, 585),(0.3, 0.87)), ((600, 609),(0.53, 0.96)),
((613, 622),(0.12, 0.95)), ((631, 640),(0.79, 0.97)), ((644, 649),(0.25, 0.84)),
((675, 679),(0.2, 0.23)), ((689, 698),(0.24, 0.46)), ((912, 921),(0.49, 0.91)),
((934, 943),(0.69, 0.71))))
	 && y >= 0.0 && y <= 1.0 && y.size(1000)
	 && y.specV(Set(((60, 69),(0.68, 0.97)), ((97, 98),(0.36, 0.8)), ((185, 194),(0.07, 0.7)),
((213, 222),(0.33, 0.84)), ((253, 262),(0.0, 0.63)), ((263, 266),(0.14, 0.28)),
((269, 269),(0.06, 0.45)), ((270, 279),(0.55, 0.81)), ((284, 293),(0.04, 0.83)),
((318, 327),(0.11, 0.22)), ((331, 331),(0.34, 0.63)), ((333, 334),(0.33, 0.57)),
((335, 340),(0.22, 0.79)), ((341, 348),(0.21, 0.84)), ((349, 358),(0.54, 0.81)),
((359, 364),(0.03, 0.78)), ((365, 368),(0.03, 0.5)), ((369, 378),(0.06, 0.42)),
((384, 385),(0.63, 0.72)), ((386, 386),(0.4, 0.58)), ((387, 391),(0.51, 0.59)),
((396, 405),(0.23, 0.87)), ((428, 437),(0.8, 1.0)), ((438, 443),(0.33, 0.96)),
((449, 458),(0.07, 0.99)), ((461, 463),(0.13, 0.48)), ((464, 466),(0.45, 0.68)),
((467, 469),(0.45, 0.71)), ((473, 475),(0.19, 0.34)), ((480, 489),(0.28, 0.4)),
((490, 491),(0.19, 0.74)), ((492, 492),(0.44, 0.52)), ((493, 493),(0.2, 0.7)),
((494, 495),(0.2, 0.27)), ((496, 496),(0.56, 0.7)), ((497, 504),(0.75, 0.97)),
((505, 512),(0.92, 0.95)), ((520, 525),(0.72, 0.72)), ((542, 549),(0.06, 0.21)),
((551, 551),(0.01, 0.86)), ((555, 563),(0.63, 0.72)), ((564, 564),(0.26, 0.36)),
((565, 566),(0.16, 0.63)), ((567, 576),(0.31, 0.99)), ((577, 581),(0.04, 0.18)),
((582, 583),(0.36, 0.9)), ((584, 585),(0.46, 0.8)), ((586, 595),(0.1, 0.11)),
((596, 605),(0.15, 0.78)), ((679, 688),(0.47, 0.99)), ((689, 698),(0.79, 0.91)),
((699, 701),(0.48, 0.82)), ((702, 703),(0.11, 0.13)), ((704, 707),(0.51, 0.56)),
((708, 710),(0.21, 0.25)), ((711, 720),(0.02, 0.91)), ((721, 723),(0.71, 0.95)),
((724, 724),(0.44, 0.98)), ((725, 734),(0.38, 0.73)), ((735, 738),(0.81, 0.84)),
((739, 748),(0.01, 0.13)), ((749, 751),(0.21, 0.59)), ((752, 752),(0.01, 0.38)),
((753, 756),(0.79, 0.83)), ((757, 757),(0.04, 0.46)), ((758, 761),(0.53, 0.89)),
((762, 763),(0.07, 0.32)), ((764, 773),(0.62, 0.89)), ((774, 775),(0.48, 0.64)),
((776, 776),(0.21, 0.24)), ((778, 779),(0.38, 0.91)), ((780, 788),(0.1, 0.59)),
((789, 790),(0.13, 0.2)), ((791, 792),(0.46, 0.59)), ((793, 797),(0.64, 0.71)),
((798, 800),(0.07, 0.44)), ((801, 803),(0.05, 0.72)), ((804, 806),(0.4, 0.47)),
((807, 807),(0.67, 0.71)), ((808, 809),(0.24, 0.65)), ((810, 810),(0.47, 0.69)),
((811, 820),(0.14, 0.91)), ((823, 823),(0.06, 0.6)), ((824, 824),(0.24, 0.99)),
((825, 825),(0.23, 0.39)), ((826, 826),(0.79, 0.82)), ((827, 827),(0.63, 0.74)),
((828, 836),(0.04, 0.09)), ((837, 838),(0.8, 0.98)), ((839, 840),(0.04, 0.05)),
((841, 841),(0.24, 0.93)), ((842, 849),(0.22, 0.67)), ((850, 852),(0.64, 0.93)),
((853, 854),(0.26, 0.92)), ((855, 863),(0.02, 0.15)), ((864, 873),(0.1, 0.76)),
((874, 881),(0.71, 0.97)), ((882, 886),(0.19, 0.81)), ((887, 895),(0.16, 0.51)),
((896, 905),(0.11, 0.79))))
	)

        //x := x + 0.01 * (-2*x - 3*y + x*x)
        val x1: Real = y.fold(x.head)((acc: Real, yi: Real) => {acc + 0.01 * (-2*acc - 3*yi + acc*acc)})
        //y := y + 0.01 * (x + y)
        val y1: Real = x.fold(y.head)((acc: Real, xi: Real) => {acc + 0.01 * (xi + acc)})
        Vector(List(x1, y1))
    }


}