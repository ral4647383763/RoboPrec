import daisy.lang._
import Real._
import daisy.lang.Vector._

object pendulum {

	def pendulum(t: Vector, w: Vector): Vector = {
require(t >= -2.0 && t <= 2.0 && t.size(1000)
	 && t.specV(Set(((0, 4),(0.39, 1.2)), ((5, 5),(-1.54, 0.4)), ((6, 7),(1.48, 1.95)),
((8, 8),(-1.82, 1.03)), ((9, 11),(0.66, 1.51)), ((12, 21),(-0.89, 1.68)),
((26, 28),(1.3, 1.58)), ((29, 30),(-1.01, 0.31)), ((31, 33),(-0.82, -0.48)),
((34, 34),(0.47, 1.04)), ((35, 35),(-0.67, 0.17)), ((36, 37),(0.27, 1.71)),
((40, 45),(0.26, 1.65)), ((52, 55),(-1.88, 1.97)), ((57, 63),(-0.16, 0.21)),
((64, 64),(0.91, 1.87)), ((65, 65),(-0.09, 0.49)), ((66, 75),(0.13, 0.54)),
((76, 76),(0.82, 1.79)), ((78, 84),(-1.94, -0.72)), ((85, 87),(-1.76, 1.51)),
((88, 89),(-1.88, 1.16)), ((90, 91),(0.59, 1.2)), ((92, 101),(-1.05, -0.48)),
((102, 103),(-1.09, 0.82)), ((104, 110),(0.12, 0.42)), ((111, 112),(-0.7, 0.35)),
((113, 116),(1.12, 1.82)), ((117, 117),(-1.01, 1.81)), ((118, 127),(-0.46, 0.06)),
((128, 137),(-0.62, 1.21)), ((140, 141),(-1.3, 0.23)), ((144, 146),(1.1, 1.74)),
((147, 156),(-1.93, -0.92)), ((159, 159),(-0.03, 1.75)), ((174, 183),(-1.35, 1.36)),
((184, 184),(-0.41, 0.19)), ((186, 187),(-1.74, 1.71)), ((192, 192),(-1.38, -0.68)),
((202, 211),(-1.46, -0.79)), ((231, 231),(0.32, 0.8)), ((232, 232),(-1.51, 1.21)),
((233, 233),(-1.43, 0.03)), ((234, 240),(1.28, 1.28)), ((242, 251),(-1.13, 1.76)),
((252, 254),(-1.08, 1.24)), ((255, 264),(-2.0, 1.47)), ((265, 265),(-1.61, 1.3)),
((266, 266),(1.07, 1.09)), ((267, 273),(0.53, 1.33)), ((274, 275),(-0.69, 1.94)),
((276, 278),(1.34, 1.68)), ((279, 280),(-0.75, 0.73)), ((281, 290),(0.74, 1.4)),
((291, 291),(-0.9, 0.27)), ((292, 292),(-0.99, 0.17)), ((293, 293),(-1.46, 1.44)),
((294, 294),(-1.03, 1.56)), ((295, 295),(0.69, 0.79)), ((296, 297),(-1.51, 1.11)),
((298, 307),(-0.77, 1.07)), ((308, 311),(-1.61, -0.87)), ((325, 330),(-0.13, 1.09)),
((331, 331),(-1.36, 1.26)), ((332, 334),(-1.57, -0.6)), ((338, 347),(-1.35, 1.52)),
((348, 348),(-1.71, 1.01)), ((351, 352),(-1.63, 0.67)), ((354, 356),(-1.67, -1.01)),
((357, 357),(0.65, 1.49)), ((364, 365),(-0.36, -0.2)), ((368, 377),(-1.88, -0.64)),
((435, 439),(-1.03, 1.15)), ((442, 451),(0.86, 1.14)), ((452, 452),(0.13, 0.8)),
((453, 462),(-1.49, -0.46)), ((509, 518),(-0.87, -0.83)), ((522, 531),(-1.14, 0.96)),
((538, 547),(-0.87, -0.7)), ((554, 563),(0.55, 1.46)), ((585, 594),(-0.48, -0.08)),
((600, 601),(1.69, 1.76)), ((603, 603),(-0.2, 0.27)), ((604, 606),(-0.97, 1.45)),
((607, 608),(-1.59, -0.97)), ((609, 610),(0.01, 1.07)), ((611, 618),(-1.37, -0.27)),
((621, 624),(-0.08, 1.96)), ((625, 625),(-0.47, 1.36)), ((626, 633),(-0.5, 1.57)),
((634, 634),(-1.51, 0.55)), ((635, 639),(0.96, 1.69)), ((640, 641),(-0.77, 0.64)),
((642, 651),(-0.85, 0.06)), ((877, 886),(-0.22, -0.13)), ((890, 899),(1.62, 1.65)),
((905, 914),(-0.09, 1.71)), ((921, 930),(-1.44, 1.86)), ((931, 932),(0.56, 1.68)),
((933, 934),(-0.35, 1.49))))
	 && w >= -5.0 && w <= 5.0 && w.size(1000)
	 && w.specV(Set(((0, 0),(-1.66, 0.83)), ((2, 2),(-4.21, -0.21)), ((3, 7),(-2.93, 2.85)),
((8, 9),(-4.8, 2.73)), ((17, 23),(-0.12, -0.09)), ((24, 24),(-3.01, 0.03)),
((25, 34),(1.89, 4.71)), ((36, 37),(-0.4, 4.66)), ((38, 47),(-2.76, 2.65)),
((49, 49),(-3.5, -1.63)), ((52, 57),(-3.1, 0.59)), ((66, 69),(-1.38, 1.42)),
((81, 90),(-4.22, -3.96)), ((100, 107),(-2.03, 0.41)), ((108, 108),(1.25, 3.06)),
((109, 112),(-2.3, -0.37)), ((113, 122),(-1.57, 3.15)), ((123, 123),(-3.12, 3.31)),
((124, 129),(-3.22, -2.96)), ((141, 150),(-1.56, 0.82)), ((158, 167),(-3.12, 2.27)),
((168, 168),(-4.36, 1.69)), ((170, 172),(0.29, 3.46)), ((173, 174),(-4.56, -3.74)),
((175, 175),(-0.12, 0.27)), ((176, 185),(1.61, 4.41)), ((206, 215),(-2.47, 4.16)),
((235, 244),(-0.9, 0.66)), ((281, 290),(-2.29, 0.28)), ((291, 292),(-2.93, -0.39)),
((293, 293),(-2.57, 3.62)), ((294, 294),(-4.72, 1.36)), ((295, 295),(-2.3, 1.75)),
((296, 305),(-1.38, -0.13)), ((306, 307),(-0.65, 3.98)), ((308, 309),(0.06, 1.97)),
((311, 320),(-0.02, 4.86)), ((321, 325),(0.84, 3.48)), ((326, 327),(-0.95, 3.73)),
((328, 329),(-3.64, 2.71)), ((330, 331),(-3.25, 2.78)), ((333, 335),(-0.96, 3.76)),
((337, 342),(0.04, 4.31)), ((343, 344),(-4.15, -2.22)), ((345, 354),(-3.85, 4.27)),
((358, 362),(-4.02, -1.36)), ((363, 364),(0.35, 3.51)), ((365, 370),(-3.17, 0.18)),
((373, 378),(-4.08, -3.63)), ((384, 387),(-2.71, -2.69)), ((388, 388),(-4.53, -3.19)),
((389, 391),(-4.07, -0.22)), ((393, 393),(1.56, 3.7)), ((404, 406),(-2.89, 3.76)),
((407, 409),(-0.92, 2.51)), ((411, 420),(-3.57, 1.33)), ((421, 421),(-0.36, 1.81)),
((424, 430),(-4.58, -0.3)), ((432, 441),(-2.91, 0.56)), ((442, 442),(-1.66, 4.05)),
((443, 443),(-0.59, 2.32)), ((447, 456),(-3.83, 2.48)), ((459, 460),(-1.66, 0.2)),
((461, 461),(0.79, 4.44)), ((462, 464),(-3.52, 1.84)), ((465, 465),(-4.52, -2.31)),
((466, 466),(-4.93, 0.78)), ((467, 472),(-4.46, -0.79)), ((473, 474),(-1.7, 1.28)),
((478, 487),(-4.33, -2.6)), ((488, 488),(0.17, 0.19)), ((489, 489),(-3.53, -2.39)),
((490, 494),(-2.03, 1.09)), ((495, 504),(-1.77, -0.59)), ((505, 505),(-3.86, -0.04)),
((506, 506),(-3.8, -3.25)), ((507, 508),(-4.63, 0.65)), ((509, 518),(-4.49, -3.49)),
((624, 633),(2.1, 3.7)), ((646, 652),(1.74, 4.1)), ((686, 695),(-2.65, 4.09)),
((703, 709),(-0.52, 1.69)), ((717, 722),(3.26, 3.75)), ((725, 734),(-0.56, 4.03)),
((749, 758),(-3.83, -3.14)), ((805, 814),(2.9, 3.08)), ((815, 824),(-1.5, -1.35)),
((826, 827),(2.05, 3.17)), ((828, 837),(2.85, 4.15)), ((843, 852),(-0.75, 4.68)),
((876, 885),(-2.84, 2.25)), ((886, 887),(-0.55, 0.8)), ((888, 896),(2.88, 4.37)),
((897, 906),(-3.7, 2.65)), ((980, 989),(-4.92, 1.96)), ((990, 991),(-0.91, 0.03)),
((992, 992),(2.18, 4.99)), ((993, 994),(-0.6, 0.88)), ((995, 995),(-2.83, 3.93)),
((996, 999),(-4.1, 1.12))))
	)

        val h: Real = 0.01
        val L: Real = 2.0
        val g: Real = 9.80665

        val iter = Vector.zip(t,w)
        val init = Vector(List(t.head, w.head))

        iter.fold(init)((acc, x) => {
            val kt = acc.at(1)
            val kw = -g/L * sin(acc.head)

            val v = Vector(List(kt,kw))
            acc + v*h
        })
    }


}