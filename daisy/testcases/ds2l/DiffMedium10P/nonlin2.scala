import daisy.lang._
import Real._
import daisy.lang.Vector._

object nonlin2 {

	def nonlin2(x: Vector, y: Vector): Vector = {
require(x >= 0.0 && x <= 1.0 && x.size(1000)
	 && x.specV(Set(((0, 0),(0.56, 0.74)), ((2, 2),(0.87, 0.96)), ((3, 12),(0.11, 0.86)),
((13, 15),(0.52, 0.94)), ((16, 18),(0.17, 0.24)), ((19, 20),(0.21, 0.86)),
((21, 30),(0.08, 0.27)), ((31, 31),(0.46, 0.92)), ((38, 38),(0.07, 0.73)),
((39, 40),(0.32, 0.45)), ((42, 45),(0.21, 0.66)), ((46, 47),(0.12, 0.36)),
((48, 49),(0.48, 0.98)), ((50, 52),(0.01, 0.18)), ((53, 53),(0.51, 0.65)),
((54, 54),(0.02, 0.47)), ((55, 56),(0.54, 0.74)), ((60, 62),(0.23, 0.5)),
((63, 63),(0.6, 0.65)), ((64, 71),(0.15, 0.8)), ((72, 72),(0.74, 0.95)),
((73, 82),(0.37, 0.86)), ((91, 100),(0.18, 0.9)), ((112, 112),(0.23, 0.6)),
((116, 118),(0.08, 0.9)), ((121, 122),(0.04, 0.22)), ((124, 127),(0.14, 0.44)),
((133, 133),(0.19, 0.75)), ((136, 145),(0.58, 0.94)), ((206, 207),(0.4, 0.68)),
((208, 217),(0.01, 0.95)), ((218, 219),(0.23, 0.48)), ((221, 222),(0.51, 0.95)),
((223, 223),(0.49, 0.99)), ((224, 233),(0.22, 0.62)), ((235, 235),(0.2, 0.83)),
((237, 237),(0.46, 1.0)), ((238, 240),(0.23, 0.96)), ((243, 243),(0.32, 0.41)),
((244, 253),(0.34, 0.67)), ((255, 259),(0.02, 0.37)), ((260, 269),(0.16, 0.83)),
((293, 302),(0.0, 0.61)), ((304, 313),(0.26, 0.45)), ((319, 328),(0.56, 0.71)),
((474, 483),(0.14, 0.24)), ((484, 487),(0.12, 0.96)), ((488, 488),(0.14, 0.15)),
((489, 498),(0.52, 0.58)), ((522, 528),(0.06, 0.89)), ((529, 529),(0.17, 0.23)),
((530, 539),(0.45, 0.59)), ((540, 540),(0.41, 0.89)), ((541, 550),(0.66, 0.86)),
((552, 552),(0.27, 0.96)), ((553, 560),(0.41, 0.94)), ((582, 591),(0.05, 0.91)),
((592, 593),(0.02, 0.1)), ((594, 595),(0.29, 0.29)), ((596, 605),(0.87, 0.97)),
((606, 606),(0.42, 0.53)), ((607, 608),(0.81, 0.85)), ((609, 609),(0.51, 0.65)),
((610, 612),(0.12, 0.24)), ((613, 613),(0.59, 0.66)), ((614, 614),(0.8, 0.9)),
((615, 616),(0.19, 0.96)), ((617, 617),(0.08, 0.9)), ((618, 620),(0.18, 0.57)),
((621, 630),(0.26, 0.69)), ((631, 632),(0.24, 0.37)), ((634, 636),(0.52, 0.68)),
((638, 641),(0.07, 0.74)), ((642, 651),(0.47, 0.62)), ((656, 665),(0.67, 0.8)),
((666, 666),(0.01, 0.48)), ((669, 675),(0.68, 0.71)), ((676, 676),(0.18, 0.65)),
((677, 686),(0.79, 0.96)), ((690, 693),(0.23, 0.43)), ((695, 700),(0.21, 0.96)),
((701, 709),(0.41, 0.96)), ((740, 749),(0.23, 0.9)), ((765, 768),(0.36, 0.74)),
((772, 772),(0.66, 0.77)), ((792, 801),(0.13, 0.22)), ((900, 909),(0.21, 0.27)),
((910, 910),(0.04, 0.14)), ((911, 912),(0.41, 0.42)), ((913, 913),(0.08, 0.58)),
((914, 918),(0.58, 0.94)), ((919, 922),(0.36, 0.7)), ((923, 926),(0.18, 0.44)),
((927, 936),(0.02, 0.48)), ((937, 946),(0.16, 0.68)), ((981, 990),(0.37, 0.96)),
((991, 991),(0.77, 0.84)), ((992, 996),(0.63, 0.64)), ((997, 998),(0.7, 0.97)),
((999, 999),(0.2, 0.77))))
	 && y >= 0.0 && y <= 1.0 && y.size(1000)
	 && y.specV(Set(((0, 9),(0.25, 0.81)), ((10, 10),(0.38, 0.66)), ((11, 12),(0.13, 0.84)),
((13, 13),(0.34, 0.54)), ((14, 15),(0.35, 0.82)), ((16, 16),(0.84, 0.85)),
((17, 26),(0.14, 0.88)), ((28, 28),(0.74, 0.94)), ((29, 30),(0.65, 0.68)),
((31, 32),(0.05, 0.87)), ((33, 42),(0.46, 0.55)), ((43, 43),(0.34, 0.78)),
((44, 53),(0.78, 0.87)), ((54, 59),(0.21, 0.34)), ((65, 66),(0.1, 0.25)),
((67, 70),(0.03, 0.33)), ((71, 73),(0.23, 0.8)), ((74, 74),(0.07, 0.07)),
((75, 81),(0.2, 0.74)), ((82, 91),(0.4, 0.46)), ((96, 105),(0.8, 0.95)),
((164, 173),(0.31, 0.63)), ((174, 175),(0.47, 0.89)), ((176, 176),(0.73, 0.9)),
((177, 186),(0.31, 0.87)), ((191, 192),(0.11, 0.57)), ((193, 202),(0.59, 0.83)),
((203, 203),(0.48, 0.52)), ((204, 210),(0.42, 0.88)), ((211, 219),(0.21, 0.67)),
((220, 220),(0.36, 0.36)), ((221, 222),(0.7, 0.96)), ((223, 232),(0.12, 0.91)),
((234, 243),(0.03, 0.59)), ((245, 245),(0.43, 0.72)), ((246, 255),(0.09, 0.43)),
((261, 270),(0.52, 0.82)), ((271, 273),(0.36, 0.79)), ((274, 275),(0.22, 0.74)),
((276, 278),(0.22, 0.8)), ((279, 283),(0.88, 0.99)), ((284, 284),(0.38, 0.43)),
((286, 295),(0.71, 0.93)), ((296, 301),(0.2, 0.3)), ((302, 302),(0.33, 0.73)),
((303, 303),(0.19, 0.55)), ((304, 312),(0.5, 0.67)), ((313, 314),(0.14, 0.96)),
((315, 324),(0.56, 1.0)), ((325, 328),(0.18, 0.8)), ((333, 342),(0.55, 0.91)),
((347, 352),(0.76, 0.87)), ((354, 363),(0.36, 0.92)), ((364, 364),(0.02, 0.21)),
((365, 370),(0.5, 0.9)), ((385, 394),(0.9, 0.95)), ((395, 399),(0.51, 0.93)),
((401, 401),(0.14, 0.56)), ((402, 411),(0.63, 0.8)), ((413, 422),(0.42, 0.6)),
((423, 423),(0.26, 0.28)), ((425, 428),(0.42, 0.51)), ((430, 431),(0.09, 0.47)),
((432, 441),(0.01, 0.34)), ((443, 452),(0.72, 0.75)), ((453, 455),(0.24, 0.26)),
((456, 458),(0.18, 0.52)), ((459, 468),(0.6, 0.9)), ((469, 473),(0.2, 0.59)),
((474, 474),(0.72, 0.75)), ((475, 481),(0.71, 0.71)), ((487, 489),(0.27, 0.84)),
((490, 490),(0.05, 0.93)), ((491, 500),(0.44, 0.94)), ((596, 605),(0.07, 0.09)),
((606, 614),(0.68, 0.8)), ((619, 620),(0.14, 0.46)), ((630, 639),(0.64, 1.0)),
((718, 727),(0.34, 0.77)), ((728, 728),(0.2, 0.25)), ((729, 731),(0.16, 0.41)),
((732, 732),(0.3, 0.62)), ((733, 739),(0.16, 0.22)), ((740, 741),(0.08, 0.19)),
((742, 751),(0.32, 0.5)), ((752, 753),(0.18, 0.48)), ((755, 764),(0.44, 0.97)),
((765, 766),(0.49, 0.94)), ((767, 767),(0.2, 0.47)), ((768, 769),(0.14, 0.59)),
((770, 770),(0.07, 0.17)), ((771, 780),(0.7, 0.97)), ((781, 781),(0.35, 0.4)),
((782, 782),(0.35, 0.43)), ((783, 792),(0.39, 0.69)), ((798, 803),(0.15, 0.86)),
((810, 819),(0.01, 0.57)), ((841, 850),(0.73, 0.85)), ((854, 857),(0.35, 0.63)),
((901, 910),(0.4, 0.92))))
	)

        //x := x + 0.01 * (-x + 2*x*x + y*y)
        val x1: Real = y.fold(x.head)((acc: Real, yi: Real) => {acc + 0.01 * (-acc + 2*acc*acc + yi*yi)})
        //y := y + 0.01 * (-y + y*y)
        val y1: Real = x.fold(y.head)((acc: Real, xi: Real) => {acc + 0.01 * (-acc + acc*acc)})
        Vector(List(x1, y1))
    }


}