import daisy.lang._
import Real._
import daisy.lang.Vector._

object lyapunov {

	def lyapunov(x: Vector, weights1: Matrix, weights2: Matrix, bias1: Vector, bias2: Real): Vector = {
require(0.5307131 <= bias2 && bias2 <= 0.5307131
	 && x >= -6.0 && x <= 6.0 && x.size(100)
	 && x.specV(Set(((0, 4),(-2.73, 4.16)), ((5, 5),(-5.6, 5.0)), ((6, 7),(-4.13, 4.98)),
((8, 18),(-2.78, 4.35)), ((33, 43),(-1.04, 0.77)), ((44, 45),(4.22, 5.1)),
((46, 50),(-0.34, 1.49)), ((51, 58),(-1.73, 4.86)), ((60, 70),(-3.33, 4.89)),
((74, 84),(-2.6, 1.19))))
	 && bias1 >= -0.8746956 && bias1 <= 1.1860801 && bias1.size(100)
	 && bias1.specV(Set(((0, 3),(0.35, 1.15)), ((9, 19),(0.6, 1.12)), ((26, 36),(-0.69, 1.16)),
((37, 40),(-0.23, 0.31)), ((42, 45),(0.18, 0.25)), ((49, 53),(-0.69, 0.27)),
((55, 63),(0.21, 0.3)), ((64, 65),(-0.77, 0.4)), ((67, 77),(-0.86, 0.05)),
((78, 86),(-0.76, -0.04))))
	 && weights1 >= -0.6363012 && weights1 <= 1.0211772 && weights1.size(100,100)
	 && weights1.specM(Set((Set((86, 72), (97, 81), (89, 77), (17, 58), (8, 9), (40, 41), (83, 21), (11, 14), (52, 15), (83, 39), (33, 20), (73, 74), (33, 38), (22, 10), (54, 79), (37, 8), (10, 54), (2, 50), (39, 99), (22, 28), (98, 5), (43, 69), (89, 36), (22, 46), (86, 49), (32, 78), (14, 42), (79, 10), (96, 81), (16, 70), (36, 48), (99, 86), (55, 61), (15, 25), (89, 72), (90, 37), (36, 66), (79, 46), (47, 75), (48, 40), (5, 78), (52, 10), (80, 90), (58, 90), (25, 11), (93, 47), (62, 78), (81, 91), (25, 47), (12, 77), (86, 26), (65, 3), (98, 0), (78, 40), (99, 81), (78, 58), (28, 39), (70, 54), (90, 32), (28, 57), (71, 37), (40, 31), (75, 7), (27, 97), (19, 93), (31, 67), (34, 11), (67, 8), (12, 72), (32, 68), (78, 35), (14, 32), (55, 33), (99, 76), (96, 89), (48, 12), (71, 14), (16, 78), (90, 27), (77, 57), (71, 32), (5, 68), (94, 15), (21, 31), (7, 96), (41, 9), (73, 41), (21, 49), (10, 21), (19, 88), (8, 97)),(0.94, 0.95)), (Set((30, 97), (31, 62), (0, 93), (13, 32), (32, 45), (74, 60), (24, 41), (87, 79), (53, 86), (72, 99), (78, 30), (23, 94), (34, 91), (36, 33), (65, 78), (17, 38), (99, 89), (68, 83), (29, 12), (9, 52), (83, 1), (21, 26), (52, 13), (19, 65), (93, 14), (80, 93), (54, 41), (42, 85), (20, 48), (73, 72), (13, 27), (14, 4), (87, 74), (1, 34), (16, 32), (13, 45), (36, 28), (1, 70), (47, 37), (17, 33), (76, 82), (49, 65), (5, 40), (69, 43), (81, 17), (92, 63), (7, 86), (93, 9), (39, 38)),(0.0, 0.8)),
		(Set((83, 81), (20, 43), (11, 74), (30, 87), (0, 83), (23, 48), (19, 96), (60, 97), (84, 64), (11, 92), (13, 22), (23, 66), (97, 15), (53, 76), (13, 40), (55, 18), (28, 1), (88, 52), (34, 81), (5, 17), (92, 22), (65, 68), (34, 99), (57, 64), (46, 73), (92, 40), (6, 0), (38, 69), (7, 63), (68, 91), (92, 58), (18, 72), (42, 39), (21, 16), (62, 17), (90, 97), (91, 62), (18, 90), (19, 55), (27, 77), (10, 6), (91, 80), (60, 74), (2, 2), (31, 47), (32, 12), (54, 49), (66, 23), (35, 17), (4, 48), (84, 77), (16, 40), (5, 12), (88, 65), (26, 53)),(0.28, 0.88)), (Set((50, 20), (61, 29), (50, 38), (71, 79), (27, 54), (50, 56), (94, 62), (91, 75), (19, 68), (4, 25), (51, 20), (87, 41), (75, 85), (96, 28), (23, 56), (35, 30), (72, 79), (1, 37), (88, 42), (56, 71), (69, 10), (38, 41), (97, 90), (67, 86), (78, 95), (70, 91), (81, 2), (50, 33), (27, 49), (63, 70), (18, 80), (42, 47), (62, 25), (12, 6), (19, 63), (75, 62), (31, 37), (72, 38), (53, 43), (13, 7), (44, 74), (65, 17), (68, 22), (69, 5), (50, 10), (59, 77), (14, 87), (38, 54), (7, 48), (8, 13), (69, 41), (36, 93), (7, 66), (98, 86), (27, 44), (73, 11), (30, 49), (63, 83)),(-0.06, 0.79)),
		(Set((41, 46), (21, 86), (53, 38), (64, 47), (34, 43), (65, 30), (25, 92), (49, 22), (22, 68), (78, 67), (7, 25), (89, 76), (68, 53), (70, 81), (71, 46), (50, 23), (82, 55), (79, 68), (70, 99), (71, 64), (30, 26), (27, 39), (63, 60), (73, 6), (71, 82), (30, 44), (91, 60), (63, 78), (20, 18), (11, 49), (6, 83), (53, 15), (94, 65), (84, 39), (25, 51), (24, 6), (56, 38), (44, 82), (64, 60), (74, 92), (34, 56), (46, 30), (15, 24), (38, 26), (3, 68), (67, 71), (90, 36), (15, 42), (70, 76), (8, 3), (42, 14), (63, 55), (9, 84), (60, 31), (6, 60), (48, 75), (21, 58), (63, 73), (12, 9), (94, 60), (95, 25), (40, 89), (4, 5), (53, 28), (39, 93), (37, 20), (10, 66), (20, 98), (14, 36), (66, 83), (76, 29), (18, 6), (7, 15), (3, 63), (89, 66), (36, 60), (78, 75)),(0.15, 0.88)), (Set((79, 40), (47, 69), (17, 65), (36, 78), (19, 7), (55, 91), (28, 74), (11, 3), (17, 83), (83, 46), (52, 40), (62, 72), (81, 85), (64, 14), (87, 16), (52, 58), (93, 59), (56, 28), (25, 59), (46, 2), (68, 2), (78, 34), (23, 98), (57, 11), (49, 7), (96, 88), (7, 10), (49, 25), (79, 35), (1, 97), (70, 66), (48, 29), (90, 44), (18, 37), (42, 4), (29, 34), (75, 1), (47, 82), (9, 74), (77, 92), (52, 17), (80, 97), (95, 15), (73, 76), (62, 85), (74, 59), (25, 54), (3, 17), (66, 55), (20, 88), (86, 33), (32, 62), (43, 71), (67, 38), (79, 12), (24, 76), (1, 74), (36, 50), (55, 63), (79, 30), (16, 90), (59, 70), (29, 29), (47, 77), (80, 74), (83, 18), (5, 80), (61, 79), (21, 43), (27, 86), (50, 88), (42, 84), (41, 39), (4, 75), (97, 37), (67, 33), (36, 27), (4, 93), (24, 71), (26, 13), (17, 32), (13, 80), (82, 12), (96, 96), (77, 64), (29, 24), (71, 39), (6, 40), (52, 7), (52, 25), (19, 77), (27, 99), (73, 66), (32, 34), (56, 13), (74, 49), (43, 43), (39, 91), (13, 39), (95, 90), (51, 65), (23, 83), (55, 35), (18, 4), (17, 45), (99, 96), (28, 54), (6, 17), (68, 90), (48, 32), (57, 99), (58, 64), (40, 28), (26, 93), (60, 6), (75, 4), (19, 72), (61, 87), (30, 81), (10, 23), (91, 97), (19, 90), (62, 70), (23, 60), (32, 47), (78, 14), (12, 87), (35, 52), (59, 19)),(-0.22, 0.76)),
		(Set((87, 99), (24, 61), (70, 28), (98, 10), (1, 77), (71, 11), (99, 91), (77, 54), (61, 46), (58, 59), (26, 88), (9, 54), (38, 99), (21, 28), (27, 71), (69, 86), (74, 3), (85, 12), (27, 89), (51, 19), (62, 65), (75, 84), (74, 39), (11, 99), (13, 29), (95, 80), (51, 55), (16, 34), (96, 63), (28, 8), (55, 25), (16, 52), (90, 1), (45, 97), (71, 6), (63, 2), (29, 9), (38, 76), (98, 90), (81, 19), (73, 15), (21, 23), (79, 95), (7, 88), (81, 37), (8, 53)),(-0.3, 0.6)), (Set((73, 33), (44, 6), (30, 71), (10, 13), (83, 83), (54, 56), (94, 92), (51, 32), (24, 15), (66, 30), (12, 59), (75, 97), (4, 55), (78, 4), (64, 69), (70, 0), (4, 73), (87, 89), (24, 51), (45, 92), (46, 57), (22, 90), (14, 86), (58, 31), (49, 62), (29, 4), (92, 42), (98, 85), (26, 78), (19, 39), (79, 90), (27, 61), (82, 95), (74, 11), (20, 40), (39, 53), (94, 87), (95, 52), (96, 17), (16, 6), (75, 92), (35, 19), (12, 54), (13, 19), (41, 99), (33, 95), (10, 93), (56, 60), (72, 86), (45, 69), (37, 65), (16, 42), (76, 56), (92, 19), (65, 65), (57, 61), (49, 57), (46, 70), (79, 67), (7, 60), (49, 75), (26, 73), (61, 49), (39, 12), (30, 43), (27, 56), (42, 54), (83, 55), (11, 48), (8, 61), (20, 35), (21, 98), (95, 47), (23, 40), (60, 89), (53, 50), (95, 65), (96, 30), (10, 88), (33, 90), (34, 55), (99, 35), (96, 48), (34, 73), (86, 83), (5, 9), (98, 57), (8, 20), (90, 71), (18, 64), (19, 29), (79, 80), (81, 22), (27, 51), (19, 47), (29, 79), (4, 4), (6, 95), (75, 82), (65, 19), (93, 99), (25, 81), (45, 59), (22, 75), (89, 83), (8, 15)),(0.08, 0.64)),
		(Set((82, 62), (63, 67), (91, 49), (9, 96), (60, 43), (12, 3), (63, 85), (40, 83), (41, 48), (21, 88), (72, 35), (33, 62), (87, 51), (10, 78), (16, 9), (53, 58), (99, 25), (45, 54), (86, 55), (85, 90), (10, 96), (34, 63), (57, 46), (49, 42), (90, 43), (70, 83), (8, 10), (50, 25), (48, 64), (20, 2), (52, 34), (94, 49), (95, 14), (0, 42), (84, 23), (52, 52), (25, 53), (53, 53), (99, 20), (2, 69), (85, 85), (49, 1), (98, 24), (43, 88), (49, 19), (35, 84), (14, 61), (55, 62), (24, 93), (7, 22)),(-0.14, 0.91)), (Set((27, 0), (50, 2), (18, 31), (17, 72), (90, 56), (18, 49), (55, 98), (70, 96), (75, 31), (95, 9), (72, 25), (81, 92), (85, 62), (10, 68), (46, 9), (74, 89), (2, 82), (43, 83), (86, 63), (59, 46), (1, 86), (98, 37), (47, 53), (16, 84), (59, 64), (55, 75), (78, 77), (90, 51), (42, 11), (17, 85), (91, 34), (58, 86), (21, 55), (9, 99), (52, 42), (25, 25), (10, 45), (3, 6), (88, 1), (14, 15), (25, 61), (46, 4), (78, 36), (97, 49), (43, 78), (70, 50), (35, 92), (36, 57), (1, 99), (82, 42), (28, 71), (71, 51), (80, 81), (52, 19), (40, 63), (93, 56), (2, 36), (39, 85), (31, 81), (10, 58), (56, 25), (97, 26), (3, 19), (66, 57), (22, 32), (24, 60), (98, 9), (66, 75), (90, 5)),(0.67, 0.72))))
	 && weights2 >= -0.80846876 && weights2 <= 1.1081733 && weights2.size(1,100)
	 && weights2.specM(Set((Set((67, 4), (6, 82), (69, 62), (39, 91), (7, 35), (56, 19), (83, 3), (2, 48)),(-0.61, 0.72)), (Set((31, 29), (52, 64), (3, 22), (57, 57), (34, 37), (3, 89), (86, 41)),(-0.16, 0.73)),
		(Set((58, 89), (24, 2), (33, 14), (14, 95), (32, 85), (80, 3), (80, 67), (58, 0)),(-0.8, -0.23)), (Set((63, 85), (54, 82), (52, 48), (35, 41)),(0.3, 0.36)),
		(Set((45, 94), (19, 8), (65, 5), (98, 5), (15, 62), (16, 9), (81, 62), (83, 38)),(0.13, 1.08)), (Set((48, 86)),(-0.08, 0.2)),
		(Set((40, 27), (55, 76), (92, 10), (88, 58), (23, 87), (22, 85), (70, 28)),(0.35, 1.09)), (Set((85, 77), (42, 76), (65, 71), (79, 3), (20, 48), (26, 73), (78, 56), (86, 57)),(-0.55, 0.48)),
		(Set((88, 33)),(-0.01, 0.72)), (Set((1, 37), (28, 55), (63, 22)),(0.48, 0.52))))
	)

    val layer1: Vector = (weights1.x(x) + bias1).map(el => {
      val relu = Vector(List(el, 0.0))
      relu.max()
    })
    val layer2: Vector = (weights2.x(layer1) + bias2).map(el => {
      val relu = Vector(List(el, 0.0))
      relu.max()
    })
    layer2
  }


}